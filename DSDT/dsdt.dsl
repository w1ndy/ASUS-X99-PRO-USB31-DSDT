/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20180427 (64-bit version)(RM)
 * Copyright (c) 2000 - 2018 Intel Corporation
 * 
 * Disassembling to non-symbolic legacy ASL operators
 *
 * Disassembly of iASLPhhZqs.aml, Sun Nov 11 02:44:11 2018
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x00035FE1 (221153)
 *     Revision         0x02
 *     Checksum         0xBF
 *     OEM ID           "ALASKA"
 *     OEM Table ID     "A M I "
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20091013 (537464851)
 */
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    Method (DTGP, 5, NotSerialized)
    {
        If (LEqual (Arg0, ToUUID ("a0b5b7c6-1318-441c-b0c9-fe695eaf949b")))
        {
            If (LEqual (Arg1, One))
            {
                If (LEqual (Arg2, Zero))
                {
                    Store (Buffer (One)
                        {
                             0x03                                           
                        }, Arg4)
                    Return (One)
                }

                If (LEqual (Arg2, One))
                {
                    Return (One)
                }
            }
        }

        Store (Buffer (One)
            {
                 0x00                                           
            }, Arg4)
        Return (Zero)
    }

    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x00)
    Name (IO1L, 0x00)
    Name (IO2B, 0x0290)
    Name (IO2L, 0x10)
    Name (IO3B, 0x00)
    Name (IO3L, 0x00)
    Name (IO4B, 0x00)
    Name (IO4L, 0x00)
    Name (SP1O, 0x2E)
    Name (IOES, 0x00)
    Name (IOHW, 0x0290)
    Name (IOHB, 0x0290)
    Name (IOHL, 0x10)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x01)
    Name (PEPM, 0x01)
    Name (PEER, 0x01)
    Name (PECS, 0x01)
    Name (ITKE, 0x00)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (MFCT, 0xAA)
    Name (DSSP, 0x00)
    Name (FHPP, 0x00)
    Name (SMIM, 0x80000009)
    Name (AMWV, 0x09)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, 0x00)
    Name (TMF1, 0x00)
    Name (TMF2, 0x00)
    Name (TMF3, 0x00)
    Name (TTPF, 0x01)
    Name (DTPT, 0x00)
    Name (TTDP, 0x00)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xFFFF0000)
    Name (PPIL, 0xF0)
    Name (AMDT, 0x00)
    Name (TPMF, 0x00)
    Name (PPIV, 0x00)
    Name (TBSW, 0xBC)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (PMBA, 0x0400)
    Name (PMLN, 0x80)
    Name (SMCR, 0x0430)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x00100000)
    Name (PM30, 0x0430)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (SHPC, 0x00)
    Name (PICM, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            Store (0xAA, DBG8)
        }
        Else
        {
            Store (0xAC, DBG8)
        }

        Store (Arg0, PICM)
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If (LNotEqual (OSVR, Ones))
        {
            Return (OSVR)
        }

        If (LEqual (PICM, 0x00))
        {
            Store (0xAC, DBG8)
        }

        Store (0x03, OSVR)
        If (CondRefOf (\_OSI, Local0))
        {
            And(Local0, Ones, Local0)
            If (_OSI ("Windows 2001"))
            {
                Store (0x04, OSVR)
            }

            If (_OSI ("Windows 2001.1"))
            {
                Store (0x05, OSVR)
            }

            If (_OSI ("FreeBSD"))
            {
                Store (0x06, OSVR)
            }

            If (_OSI ("HP-UX"))
            {
                Store (0x07, OSVR)
            }

            If (_OSI ("OpenVMS"))
            {
                Store (0x08, OSVR)
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                Store (0x09, OSVR)
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                Store (0x0A, OSVR)
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                Store (0x0B, OSVR)
            }

            If (_OSI ("Windows 2006"))
            {
                Store (0x0C, OSVR)
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                Store (0x0D, OSVR)
            }

            If (_OSI ("Windows 2009"))
            {
                Store (0x0E, OSVR)
            }

            If (_OSI ("Windows 2012"))
            {
                Store (0x0F, OSVR)
            }

            If (_OSI ("Windows 2013"))
            {
                Store (0x10, OSVR)
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                Store (0x00, OSVR)
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                Store (0x01, OSVR)
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                Store (0x02, OSVR)
            }

            If (MCTH (_OS, "Linux"))
            {
                Store (0x03, OSVR)
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                Store (0x06, OSVR)
            }

            If (MCTH (_OS, "HP-UX"))
            {
                Store (0x07, OSVR)
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                Store (0x08, OSVR)
            }
        }

        Return (OSVR)
    }

    Method (MCTH, 2, NotSerialized)
    {
        If (LLess (SizeOf (Arg0), SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Add (SizeOf (Arg0), 0x01, Local0)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        Store (Arg0, BUF0)
        Store (Arg1, BUF1)
        While (Local0)
        {
            Decrement (Local0)
            If (LNotEqual (DerefOf (Index (BUF0, Local0)), DerefOf (Index (BUF1, Local0))))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Store (Arg0, Index (PRWP, 0x00))
        Store (ShiftLeft (SS1, 0x01), Local0)
        Or (Local0, ShiftLeft (SS2, 0x02), Local0)
        Or (Local0, ShiftLeft (SS3, 0x03), Local0)
        Or (Local0, ShiftLeft (SS4, 0x04), Local0)
        If (And (ShiftLeft (0x01, Arg1), Local0))
        {
            Store (Arg1, Index (PRWP, 0x01))
        }
        Else
        {
            ShiftRight (Local0, 0x01, Local0)
            If (LOr (LEqual (OSFL (), 0x01), LEqual (OSFL (), 0x02)))
            {
                FindSetLeftBit (Local0, Index (PRWP, 0x01))
            }
            Else
            {
                FindSetRightBit (Local0, Index (PRWP, 0x01))
            }
        }

        Return (PRWP)
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (Index (WAKP, 0x00)))
        {
            Store (0x00, Index (WAKP, 0x01))
        }
        Else
        {
            Store (Arg0, Index (WAKP, 0x01))
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, 0x01)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, 0x01)
    Name (SS2, 0x00)
    Name (SS3, 0x01)
    Name (SS4, 0x01)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, 0x01)
    Name (OSHF, 0x00)
    Scope (_SB)
    {
        Name (XCNT, 0x00)
        Name (ECNT, 0x00)
        Name (OSYS, 0x00)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("663e35af-cc10-41a4-88ea-5470af055295")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (0x00)
                            {
                                If (LEqual (EMCA, 0x01))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                           
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                           
                                    })
                                }
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Return (LDIR)
                    }
                    Default
                    {
                    }

                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (_OSI, Local0))
            {
                And(Local0, Ones, Local0)
                If (_OSI ("Windows 2001.1 SP1"))
                {
                    Store (0x05, OSYS)
                }

                If (_OSI ("Windows 2001.1"))
                {
                    Store (0x06, OSYS)
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    Store (0x07, OSYS)
                }

                If (_OSI ("Windows 2001"))
                {
                    Store (0x08, OSYS)
                }

                If (_OSI ("Windows 2006.1"))
                {
                    Store (0x09, OSYS)
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    Store (0x0A, OSYS)
                }

                If (_OSI ("Windows 2006"))
                {
                    Store (0x0B, OSYS)
                }

                If (_OSI ("Windows 2009"))
                {
                    Store (0x0C, OSYS)
                }

                If (_OSI ("Windows 2012"))
                {
                    Store (0x0D, OSYS)
                }

                If (_OSI ("Linux"))
                {
                    Store (0x01, OSYS)
                }

                If (_OSI ("FreeBSD"))
                {
                    Store (0x02, OSYS)
                }

                If (_OSI ("HP-UX"))
                {
                    Store (0x03, OSYS)
                }

                If (_OSI ("OpenVMS"))
                {
                    Store (0x04, OSYS)
                }

                If (LGreaterEqual (OSYS, 0x0D))
                {
                    If (LEqual (XCNT, 0x00))
                    {
                        ^PCI0.XHCI.XSEL (0x00)
                        Increment (XCNT)
                    }
                }
                Else
                {
                    Store (OSYS, IO80)
                }
            }

            ^PCI0.RP08.TINI ()
        }
    }

    Name (BBI0, 0x00000000)
    Name (BBI1, 0x00000000)
    Name (BBI2, 0x00000000)
    Name (BBI3, 0x00000000)
    Name (BBU0, 0x000000FF)
    Name (BBU1, 0x000000FF)
    Name (BBU2, 0x000000FF)
    Name (BBU3, 0x000000FF)
    OperationRegion (DBG0, SystemIO, 0x80, 0x02)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8, 
        IO81,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (GPCT, SystemIO, 0x0442, 0x01)
    Field (GPCT, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SGPC,   1
    }

    OperationRegion (GPIV, SystemIO, 0x052C, 0x02)
    Field (GPIV, ByteAcc, NoLock, Preserve)
    {
        GP0I,   1, 
            ,   13, 
        RASI,   1
    }

    OperationRegion (PSYS, SystemMemory, 0xBC18D000, 0x0400)
    Field (PSYS, ByteAcc, NoLock, Preserve)
    {
        PLAT,   32, 
        APC0,   1, 
        APC1,   1, 
        APC2,   1, 
        APC3,   1, 
        APC4,   1, 
        Offset (0x05), 
        RES0,   8, 
        TPME,   1, 
        CSEN,   1, 
        C3EN,   1, 
        C6EN,   1, 
        C7EN,   1, 
        MWOS,   1, 
        PSEN,   1, 
        EMCA,   1, 
        HWAL,   1, 
        KPRS,   1, 
        MPRS,   1, 
        TSEN,   1, 
        FGTS,   1, 
        OSCX,   1, 
        RESX,   2, 
        CPHP,   8, 
        IIOP,   8, 
        IIOH,   8, 
        CPUT,   8, 
        PRBM,   32, 
        P0ID,   32, 
        P1ID,   32, 
        P2ID,   32, 
        P3ID,   32, 
        P0BM,   64, 
        P1BM,   64, 
        P2BM,   64, 
        P3BM,   64, 
        MEBM,   16, 
        MEBC,   16, 
        CFMM,   32, 
        TSSZ,   32, 
        M0BS,   64, 
        M1BS,   64, 
        M2BS,   64, 
        M3BS,   64, 
        M4BS,   64, 
        M5BS,   64, 
        M6BS,   64, 
        M7BS,   64, 
        M0RN,   64, 
        M1RN,   64, 
        M2RN,   64, 
        M3RN,   64, 
        M4RN,   64, 
        M5RN,   64, 
        M6RN,   64, 
        M7RN,   64, 
        SMI0,   32, 
        SMI1,   32, 
        SMI2,   32, 
        SMI3,   32, 
        SCI0,   32, 
        SCI1,   32, 
        SCI2,   32, 
        SCI3,   32, 
        MADD,   64, 
        CUU0,   128, 
        CUU1,   128, 
        CUU2,   128, 
        CUU3,   128, 
        CUU4,   128, 
        CUU5,   128, 
        CUU6,   128, 
        CUU7,   128, 
        CPSP,   8, 
        ME00,   128, 
        ME01,   128, 
        ME10,   128, 
        ME11,   128, 
        ME20,   128, 
        ME21,   128, 
        ME30,   128, 
        ME31,   128, 
        ME40,   128, 
        ME41,   128, 
        ME50,   128, 
        ME51,   128, 
        ME60,   128, 
        ME61,   128, 
        ME70,   128, 
        ME71,   128, 
        MESP,   16, 
        DHRD,   192, 
        ATSR,   192, 
        RHSA,   192, 
        LDIR,   64, 
        PRID,   32, 
        WSIC,   8, 
        WSIS,   16, 
        WSIB,   8, 
        WSID,   8, 
        WSIF,   8, 
        WSTS,   8, 
        WHEA,   8, 
        PFMA,   64, 
        PFMS,   8, 
        PFIO,   16, 
        CNBS,   8, 
        XHMD,   8, 
        SBV1,   8, 
        SBV2,   8, 
        SBS3,   8, 
        SBS4,   8, 
        AHPE,   8, 
        CLOD,   8, 
        HWEN,   2, 
        ACEN,   1, 
        RES1,   5, 
        SCUF,   8
    }

    OperationRegion (GSTS, SystemIO, 0x0422, 0x02)
    Field (GSTS, ByteAcc, NoLock, Preserve)
    {
        GP00,   1, 
            ,   12, 
        GP13,   1
    }

    OperationRegion (GPE0, SystemIO, 0x0428, 0x08)
    Field (GPE0, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPEH,   1, 
            ,   1, 
        USB1,   1, 
        USB2,   1, 
        USB5,   1, 
            ,   3, 
        PCIE,   1, 
            ,   1, 
        PMEE,   1, 
        USB3,   1, 
        PMB0,   1, 
        USB4,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        USB6,   1, 
        Offset (0x06)
    }

    OperationRegion (GPES, SystemIO, 0x0420, 0x08)
    Field (GPES, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPSH,   1, 
        SGPS,   1, 
        US1S,   1, 
        US2S,   1, 
        US5S,   1, 
            ,   1, 
        SMWS,   1, 
            ,   1, 
        PEES,   1, 
            ,   1, 
        PMES,   1, 
        US3S,   1, 
        PMBS,   1, 
        US4S,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        US6S,   1, 
        Offset (0x06)
    }

    Method (IPTS, 1, NotSerialized)
    {
        Store (Arg0, IO80)
        Store (0x01, US1S)
        Store (0x01, US2S)
        Store (0x01, US5S)
        Store (0x01, SMWS)
        Store (0x01, PMES)
        Store (0x01, US3S)
        Store (0x01, PMBS)
        Store (0x01, US4S)
        Store (0x01, US6S)
        Store (0x01, GPEH)
        Store (0x01, USB1)
        Store (0x01, USB2)
        Store (0x01, USB5)
        Store (0x01, PCIE)
        Store (0x01, PMEE)
        Store (0x01, USB3)
        Store (0x01, PMB0)
        Store (0x01, USB4)
        Store (0x01, USB6)
    }

    Method (_GTS, 1, NotSerialized)  // _GTS: Going To Sleep
    {
        Store (Arg0, IO80)
    }

    Scope (_SB)
    {
        Name (PRUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Method (USTA, 1, NotSerialized)
        {
            Store (0x00, Local6)
            ShiftRight (PRBM, Arg0, Local6)
            And (Local6, 0x01, Local6)
            If (LEqual (Local6, 0x00))
            {
                Return (0x00)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Device (UNC3)
        {
            Name (_HID, EisaId ("PNP0A03"))  // _HID: Hardware ID
            Name (_UID, 0xFF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU3)
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x03))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            Store (0x01, GPSH)
                        }
                    }

                    If (LNotEqual (Arg1, One))
                    {
                        Or (CDW1, 0x08, CDW1)
                    }

                    If (LNotEqual (CDW3, CTRL))
                    {
                        Or (CDW1, 0x10, CDW1)
                    }

                    Store (CTRL, CDW3)
                    Return (Arg3)
                }
                Else
                {
                    Or (CDW1, 0x04, CDW1)
                    Store (0xEE, IO80)
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (LEqual (PICM, Zero))
                {
                    Return (PRUN)
                }

                Return (ARUN)
            }
        }

        Device (UNC2)
        {
            Name (_HID, EisaId ("PNP0A03"))  // _HID: Hardware ID
            Name (_UID, 0xBF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU2)
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x02))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            Store (0x01, GPSH)
                        }
                    }

                    If (LNotEqual (Arg1, One))
                    {
                        Or (CDW1, 0x08, CDW1)
                    }

                    If (LNotEqual (CDW3, CTRL))
                    {
                        Or (CDW1, 0x10, CDW1)
                    }

                    Store (CTRL, CDW3)
                    Return (Arg3)
                }
                Else
                {
                    Or (CDW1, 0x04, CDW1)
                    Store (0xEE, IO80)
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (LEqual (PICM, Zero))
                {
                    Return (PRUN)
                }

                Return (ARUN)
            }
        }

        Device (UNC1)
        {
            Name (_HID, EisaId ("PNP0A03"))  // _HID: Hardware ID
            Name (_UID, 0x7F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU1)
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x01))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            Store (0x01, GPSH)
                        }
                    }

                    If (LNotEqual (Arg1, One))
                    {
                        Or (CDW1, 0x08, CDW1)
                    }

                    If (LNotEqual (CDW3, CTRL))
                    {
                        Or (CDW1, 0x10, CDW1)
                    }

                    Store (CTRL, CDW3)
                    Return (Arg3)
                }
                Else
                {
                    Or (CDW1, 0x04, CDW1)
                    Store (0xEE, IO80)
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (LEqual (PICM, Zero))
                {
                    Return (PRUN)
                }

                Return (ARUN)
            }
        }

        Device (UNC0)
        {
            Name (_HID, EisaId ("PNP0A03"))  // _HID: Hardware ID
            Name (_UID, 0x3F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU0)
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK0")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x00))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If (LEqual (Arg0, ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                {
                    Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            Store (0x01, GPSH)
                        }
                    }

                    If (LNotEqual (Arg1, One))
                    {
                        Or (CDW1, 0x08, CDW1)
                    }

                    If (LNotEqual (CDW3, CTRL))
                    {
                        Or (CDW1, 0x10, CDW1)
                    }

                    Store (CTRL, CDW3)
                    Return (Arg3)
                }
                Else
                {
                    Or (CDW1, 0x04, CDW1)
                    Store (0xEE, IO80)
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (LEqual (PICM, Zero))
                {
                    Return (PRUN)
                }

                Return (ARUN)
            }
        }
    }

    Method (IWAK, 1, Serialized)
    {
        ShiftLeft (Arg0, 0x04, IO80)
        Notify (\_SB.PCI0.EHC1, 0x00)
        Notify (\_SB.PCI0.EHC2, 0x00)
        If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
        {
            \_SB.PCI0.XHCI.XWAK ()
        }

        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            Method (PSTA, 1, NotSerialized)
            {
                ShiftRight (PRBM, Arg0, Local6)
                And (Local6, 0x01, Local6)
                If (LEqual (Local6, 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (TMID, 2, NotSerialized)
            {
                Multiply (Arg0, 0x02, Local0)
                Add (Local0, Arg1, Local1)
                Return (Local1)
            }

            Name (APTC, Buffer (0x30)
            {
                /* 0000 */  0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x01, 0x03,
                /* 0008 */  0x05, 0x07, 0x09, 0x0B, 0xFF, 0xFF, 0xFF, 0xFF,
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF 
            })
            Method (TPID, 2, NotSerialized)
            {
                Store (0x00, Local0)
                If (LEqual (Arg0, 0x00))
                {
                    Store (P0ID, Local0)
                }

                If (LEqual (Arg0, 0x01))
                {
                    Store (P1ID, Local0)
                }

                If (LEqual (Arg0, 0x02))
                {
                    Store (P2ID, Local0)
                }

                If (LEqual (Arg0, 0x03))
                {
                    Store (P3ID, Local0)
                }

                Add (Local0, DerefOf (Index (APTC, Arg1)), Local0)
                Return (Local0)
            }

            Method (MSTA, 1, NotSerialized)
            {
                ShiftRight (MEBM, Arg0, Local6)
                And (Local6, 0x01, Local6)
                If (LEqual (Local6, 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (CSTA, 2, NotSerialized)
            {
                Store (0x00, Local0)
                Store (0x00, Local1)
                Store (TPID (Arg0, Arg1), Local1)
                And(Local1, Ones, Local1)
                Store (0x00, Local2)
                Add (Local2, DerefOf (Index (APTC, Arg1)), Local2)
                If (LEqual (Local2, 0xFF))
                {
                    Return (0x00)
                }

                If (LEqual (Arg0, 0x00))
                {
                    ShiftRight (P0BM, Local2, Local0)
                }

                If (LEqual (Arg0, 0x01))
                {
                    ShiftRight (P1BM, Local2, Local0)
                }

                If (LEqual (Arg0, 0x02))
                {
                    ShiftRight (P2BM, Local2, Local0)
                }

                If (LEqual (Arg0, 0x03))
                {
                    ShiftRight (P3BM, Local2, Local0)
                }

                And (Local0, 0x01, Local0)
                If (LEqual (Local0, 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (LAPC, 2, NotSerialized)
            {
                Name (APIC, Buffer (0x08){})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateByteField (APIC, 0x02, PRID)
                CreateByteField (APIC, 0x03, APID)
                CreateDWordField (APIC, 0x04, FLAG)
                Store (0x00, TYPE)
                Store (0x08, LLEN)
                Store (TPID (Arg0, Arg1), APID)
                If (LEqual (CSTA (Arg0, Arg1), 0x00))
                {
                    Store (0x00, FLAG)
                    Store (0xFF, PRID)
                    Store (0xFF, APID)
                }
                Else
                {
                    Store (APID, Local0)
                    Store (Local0, PRID)
                    Store (0x01, FLAG)
                }

                Return (APIC)
            }

            Device (SCK0)
            {
                Name (_HID, "ACPI0004")  // _HID: Hardware ID
                Name (_UID, "CPUSCK0")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Store ("CPUSCK0", CUU0)
                    Store (PSTA (0x00), Local0)
                    And (Local0, 0x03, Local1)
                    If (LAnd (LNotEqual (LSTA, 0xFF), LNotEqual (Local1, LSTA)))
                    {
                        If (LEqual (Local1, 0x03)){}
                        Else
                        {
                        }
                    }

                    Store (Local1, LSTA)
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Store (0x00, Local0)
                    Store (P0BM, Local1)
                    While (Local1)
                    {
                        Add (Local0, And (Local1, 0x01), Local0)
                        ShiftRight (Local1, 0x01, Local1)
                    }

                    Return (Or (0x00, Local0))
                }

                Processor (CP00, 0x00, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x00)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x00), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x00))
                    }
                }

                Processor (CP01, 0x02, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x01)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x01), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x01))
                    }
                }

                Processor (CP02, 0x04, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x02)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x02), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x02))
                    }
                }

                Processor (CP03, 0x06, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x03)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x03), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x03))
                    }
                }

                Processor (CP04, 0x08, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x04)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x04), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x04))
                    }
                }

                Processor (CP05, 0x0A, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x05)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x05), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x05))
                    }
                }

                Processor (CP06, 0x01, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x06)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x06), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x06))
                    }
                }

                Processor (CP07, 0x03, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x07)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x07), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x07))
                    }
                }

                Processor (CP08, 0x05, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x08)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x08), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x08))
                    }
                }

                Processor (CP09, 0x07, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x09)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x09), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x09))
                    }
                }

                Processor (CP0A, 0x09, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x0A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0A))
                    }
                }

                Processor (CP0B, 0x0B, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x0B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x0C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x0D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x0E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x0F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x10)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x10), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x11)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x11), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x12)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x12), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x13)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x13), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x14)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x14), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x15)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x15), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x16)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x16), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x17)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x17), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x18)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x18), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x19)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x19), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x1A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x1B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x1C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x1D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x1E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x1F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x20)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x20), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x21)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x21), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x22)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x22), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x23)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x23), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x24)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x24), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x25)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x25), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x26)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x26), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x27)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x27), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x28)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x28), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x29)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x29), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x2A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x2B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x2C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x2D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x2E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x00, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x00, 0x2F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2F))
                    }
                }
            }

            Device (SCK1)
            {
                Name (_HID, "ACPI0004")  // _HID: Hardware ID
                Name (_UID, "CPUSCK1")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Store ("CPUSCK1", CUU1)
                    Store (PSTA (0x01), Local0)
                    And (Local0, 0x03, Local1)
                    If (LAnd (LNotEqual (LSTA, 0xFF), LNotEqual (Local1, LSTA)))
                    {
                        If (LEqual (Local1, 0x03)){}
                        Else
                        {
                        }
                    }

                    Store (Local1, LSTA)
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Store (0x00, Local0)
                    Store (P1BM, Local1)
                    While (Local1)
                    {
                        Add (Local0, And (Local1, 0x01), Local0)
                        ShiftRight (Local1, 0x01, Local1)
                    }

                    Return (Or (0x0100, Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x00)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x00), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x01)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x01), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x02)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x02), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x03)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x03), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x04)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x04), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x05)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x05), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x06)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x06), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x07)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x07), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x08)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x08), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x09)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x09), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x0A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x0B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x0C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x0D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x0E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x0F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x10)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x10), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x11)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x11), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x12)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x12), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x13)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x13), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x14)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x14), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x15)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x15), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x16)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x16), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x17)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x17), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x18)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x18), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x19)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x19), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x1A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x1B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x1C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x1D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x1E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x1F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x20)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x20), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x21)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x21), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x22)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x22), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x23)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x23), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x24)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x24), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x25)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x25), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x26)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x26), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x27)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x27), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x28)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x28), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x29)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x29), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x2A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x2B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x2C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x2D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x2E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x01, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x01, 0x2F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2F))
                    }
                }
            }

            Device (SCK2)
            {
                Name (_HID, "ACPI0004")  // _HID: Hardware ID
                Name (_UID, "CPUSCK2")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Store ("CPUSCK2", CUU2)
                    Store (PSTA (0x02), Local0)
                    And (Local0, 0x03, Local1)
                    If (LAnd (LNotEqual (LSTA, 0xFF), LNotEqual (Local1, LSTA)))
                    {
                        If (LEqual (Local1, 0x03)){}
                        Else
                        {
                        }
                    }

                    Store (Local1, LSTA)
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Store (0x00, Local0)
                    Store (P2BM, Local1)
                    While (Local1)
                    {
                        Add (Local0, And (Local1, 0x01), Local0)
                        ShiftRight (Local1, 0x01, Local1)
                    }

                    Return (Or (0x0200, Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x00)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x00), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x01)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x01), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x02)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x02), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x03)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x03), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x04)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x04), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x05)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x05), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x06)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x06), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x07)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x07), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x08)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x08), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x09)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x09), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x0A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x0B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x0C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x0D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x0E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x0F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x10)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x10), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x11)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x11), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x12)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x12), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x13)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x13), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x14)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x14), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x15)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x15), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x16)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x16), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x17)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x17), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x18)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x18), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x19)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x19), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x1A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x1B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x1C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x1D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x1E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x1F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x20)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x20), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x21)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x21), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x22)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x22), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x23)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x23), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x24)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x24), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x25)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x25), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x26)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x26), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x27)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x27), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x28)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x28), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x29)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x29), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x2A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x2B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x2C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x2D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x2E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x02, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x02, 0x2F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2F))
                    }
                }
            }

            Device (SCK3)
            {
                Name (_HID, "ACPI0004")  // _HID: Hardware ID
                Name (_UID, "CPUSCK3")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Store ("CPUSCK3", CUU3)
                    Store (PSTA (0x03), Local0)
                    And (Local0, 0x03, Local1)
                    If (LAnd (LNotEqual (LSTA, 0xFF), LNotEqual (Local1, LSTA)))
                    {
                        If (LEqual (Local1, 0x03)){}
                        Else
                        {
                        }
                    }

                    Store (Local1, LSTA)
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Store (0x00, Local0)
                    Store (P3BM, Local1)
                    While (Local1)
                    {
                        Add (Local0, And (Local1, 0x01), Local0)
                        ShiftRight (Local1, 0x01, Local1)
                    }

                    Return (Or (0x0300, Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x00)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x00), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x01)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x01), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x02)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x02), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x03)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x03), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x04)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x04), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x05)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x05), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x06)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x06), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x07)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x07), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x08)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x08), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x09)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x09), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x0A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x0B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x0C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x0D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x0E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x0F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x0F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x10)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x10), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x11)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x11), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x12)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x12), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x13)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x13), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x14)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x14), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x15)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x15), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x16)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x16), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x17)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x17), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x18)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x18), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x19)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x19), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x1A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x1B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x1C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x1D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x1E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x1F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x1F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x20)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x20), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x21)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x21), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x22)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x22), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x23)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x23), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x24)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x24), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x25)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x25), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x26)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x26), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x27)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x27), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x28)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x28), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x29)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x29), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2A)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x2A), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2B)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x2B), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2C)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x2C), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2D)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x2D), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2E)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x2E), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007")  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If (LEqual (CLOD, 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Store (DerefOf (Index (APTC, 0x2F)), Local0)
                            Store (CNBS, Local1)
                            Subtract (Local1, 0x01, Local1)
                            ShiftRight (Local0, Local1, Local0)
                            And (Local0, 0x01, Local0)
                            Store (0x03, Local1)
                            Multiply (Local1, 0x02, Local1)
                            If (LEqual (Local0, 0x01))
                            {
                                Add (Local1, 0x01, Local1)
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (CSTA (0x03, 0x2F), 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf (LGreaterEqual (OSYS, 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2F))
                    }
                }
            }
        }

        OperationRegion (IOB2, SystemIO, 0xB2, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Name (PRSC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSC, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PR00, Package (0x25)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKH, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKF, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKE, 
                0x00
            }
        })
        Name (AR00, Package (0x25)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x14
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x1E
            }
        })
        Name (PG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x1D
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x24
            }
        })
        Name (PG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x25
            }
        })
        Name (PG28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG29, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG29, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2C
            }
        })
        Name (PG2A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG2A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG2B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG2B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2D
            }
        })
        Name (PR80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x32
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x38
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x3C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x3D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x3E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x40
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x44
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x45
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x46
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x3F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x3F
            }
        })
        Name (PRC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x48
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x4A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x4C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x4D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x4E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x50
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x54
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x55
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x56
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x58
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x5C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x5D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x5E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x57
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x57
            }
        })
        Name (PRE0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARE0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x60
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x62
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x64
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x65
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x66
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x68
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x6C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x6D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x6E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x70
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x74
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x75
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x76
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x6F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x6F
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00)
                }

                Return (PR00)
            }

            Method (XOSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Store (_BBN (), Local0)
                If (LEqual (Local0, 0x00))
                {
                    If (LEqual (Arg0, ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                    {
                        Return (^XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^BR1A.OSHP ()
                            ^BR1B.OSHP ()
                            ^BR2A.OSHP ()
                            ^BR2B.OSHP ()
                            ^BR2C.OSHP ()
                            ^BR2D.OSHP ()
                            ^BR3A.OSHP ()
                            ^BR3B.OSHP ()
                            ^BR3C.OSHP ()
                            ^BR3D.OSHP ()
                            ShiftRight (IIOH, 0x01, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x02, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x03, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            Store (0x01, GPSH)
                        }

                        If (LNotEqual (Arg1, One))
                        {
                            Or (CDW1, 0x08, CDW1)
                        }

                        If (LNotEqual (CDW3, CTRL))
                        {
                            Or (CDW1, 0x10, CDW1)
                        }

                        Store (CTRL, CDW3)
                        Return (Arg3)
                    }
                    Else
                    {
                        Or (CDW1, 0x04, CDW1)
                        Store (0xEE, IO80)
                        Return (Arg3)
                    }
                }
                Return (Zero)
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Name (_PXM, 0x00)  // _PXM: Device Proximity
            Device (APIC)
            {
                Name (_HID, EisaId ("PNP0003"))  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEC00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "PCI0PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }
            }

            Name (P0RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x1000,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xC0000000,         // Range Minimum
                    0xFBFFBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x3BFFC000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000380000000000, // Range Minimum
                    0x0000383FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            OperationRegion (TMEM, PCI_Config, 0x00, 0x0100)
            Field (TMEM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                    ,   4, 
                BSEG,   4, 
                PAMS,   48, 
                Offset (0x52), 
                DIM0,   4, 
                DIM1,   4, 
                Offset (0x54), 
                DIM2,   4
            }

            Name (MTBL, Package (0x10)
            {
                0x00, 
                0x20, 
                0x20, 
                0x30, 
                0x40, 
                0x40, 
                0x60, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0xC0, 
                0x0100, 
                0x0100, 
                0x0100, 
                0x0200
            })
            Name (ERNG, Package (0x0D)
            {
                0x000C0000, 
                0x000C4000, 
                0x000C8000, 
                0x000CC000, 
                0x000D0000, 
                0x000D4000, 
                0x000D8000, 
                0x000DC000, 
                0x000E0000, 
                0x000E4000, 
                0x000E8000, 
                0x000EC000, 
                0x000F0000
            })
            Name (PAMB, Buffer (0x07){})
            Method (EROM, 0, NotSerialized)
            {
                CreateDWordField (P0RS, \_SB.PCI0._Y00._MIN, RMIN)  // _MIN: Minimum Base Address
                CreateDWordField (P0RS, \_SB.PCI0._Y00._MAX, RMAX)  // _MAX: Maximum Base Address
                CreateDWordField (P0RS, \_SB.PCI0._Y00._LEN, RLEN)  // _LEN: Length
                CreateByteField (PAMB, 0x06, BREG)
                Store (PAMS, PAMB)
                Store (BSEG, BREG)
                Store (0x00, RMIN)
                Store (0x00, RMAX)
                Store (0x00, RLEN)
                Store (0x00, Local0)
                While (LLess (Local0, 0x0D))
                {
                    ShiftRight (Local0, 0x01, Local1)
                    Store (DerefOf (Index (PAMB, Local1)), Local2)
                    If (And (Local0, 0x01))
                    {
                        ShiftRight (Local2, 0x04, Local2)
                    }

                    And (Local2, 0x03, Local2)
                    If (RMIN)
                    {
                        If (Local2)
                        {
                            Add (DerefOf (Index (ERNG, Local0)), 0x3FFF, RMAX)
                            If (LEqual (RMAX, 0x000F3FFF))
                            {
                                Store (0x000FFFFF, RMAX)
                            }

                            Subtract (RMAX, RMIN, RLEN)
                            Increment (RLEN)
                        }
                        Else
                        {
                            Store (0x0C, Local0)
                        }
                    }
                    ElseIf (Local2)
                    {
                        Store (DerefOf (Index (ERNG, Local0)), RMIN)
                        Add (DerefOf (Index (ERNG, Local0)), 0x3FFF, RMAX)
                        If (LEqual (RMAX, 0x000F3FFF))
                        {
                            Store (0x000FFFFF, RMAX)
                        }

                        Subtract (RMAX, RMIN, RLEN)
                        Increment (RLEN)
                    }
                    Else
                    {
                    }

                    Increment (Local0)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P0RS)
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x00, 0x0100)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0E), 
                    STM0,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x00, 0x0100)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x1E), 
                    STM1,   7
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPCB, PCI_Config, 0x00, 0x0100)
                Field (LPCB, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    GLE0,   1, 
                    Offset (0xAC), 
                    Offset (0xAE), 
                    XSMB,   1
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {4}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103"))  // _HID: Hardware ID
                    OperationRegion (HPTC, SystemMemory, 0xFED1F404, 0x04)
                    Field (HPTC, DWordAcc, NoLock, Preserve)
                    {
                        HPTS,   2, 
                            ,   5, 
                        HPTE,   1, 
                        Offset (0x04)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPTE)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED01000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED02000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS3, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED03000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Switch (ToInteger (HPTS))
                        {
                            Case (0x00)
                            {
                                Return (CRS0)
                            }
                            Case (0x01)
                            {
                                Return (CRS1)
                            }
                            Case (0x02)
                            {
                                Return (CRS2)
                            }
                            Case (0x03)
                            {
                                Return (CRS3)
                            }

                        }

                        Return (CRS0)
                    }
                }

                Device (XTRA)
                {
                    Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0580,             // Range Minimum
                            0x0580,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0600,             // Range Minimum
                            0x0600,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0880,             // Range Minimum
                            0x0880,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1C000,         // Address Base
                            0x00024000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED45000,         // Address Base
                            0x00047000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEE00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12000,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12010,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1B000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                }

                OperationRegion (LPCR, PCI_Config, 0x80, 0x04)
                Field (LPCR, ByteAcc, NoLock, Preserve)
                {
                    CADR,   3, 
                        ,   1, 
                    CBDR,   3, 
                    Offset (0x01), 
                    LTDR,   2, 
                        ,   2, 
                    FDDR,   1, 
                    Offset (0x02), 
                    CALE,   1, 
                    CBLE,   1, 
                    LTLE,   1, 
                    FDLE,   1, 
                    Offset (0x03), 
                    GLLE,   1, 
                    GHLE,   1, 
                    KCLE,   1, 
                    MCLE,   1, 
                    C1LE,   1, 
                    C2LE,   1, 
                    Offset (0x04)
                }

                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }

                Method (UXDV, 1, Serialized)
                {
                    Store (0xFF, Local0)
                    Switch (Add (Arg0, 0x00))
                    {
                        Case (0x03F8)
                        {
                            Store (0x00, Local0)
                        }
                        Case (0x02F8)
                        {
                            Store (0x01, Local0)
                        }
                        Case (0x0220)
                        {
                            Store (0x02, Local0)
                        }
                        Case (0x0228)
                        {
                            Store (0x03, Local0)
                        }
                        Case (0x0238)
                        {
                            Store (0x04, Local0)
                        }
                        Case (0x02E8)
                        {
                            Store (0x05, Local0)
                        }
                        Case (0x0338)
                        {
                            Store (0x06, Local0)
                        }
                        Case (0x03E8)
                        {
                            Store (0x07, Local0)
                        }

                    }

                    Return (Local0)
                }

                Method (RRIO, 4, Serialized)
                {
                    Switch (Add (Arg0, 0x00))
                    {
                        Case (0x00)
                        {
                            Store (0x00, CALE)
                            Store (UXDV (Arg2), Local0)
                            If (LNotEqual (Local0, 0xFF))
                            {
                                Store (Local0, CADR)
                            }

                            If (Arg1)
                            {
                                Store (0x01, CALE)
                            }
                        }
                        Case (0x01)
                        {
                            Store (0x00, CBLE)
                            Store (UXDV (Arg2), Local0)
                            If (LNotEqual (Local0, 0xFF))
                            {
                                Store (Local0, CBDR)
                            }

                            If (Arg1)
                            {
                                Store (0x01, CBLE)
                            }
                        }
                        Case (0x02)
                        {
                            Store (0x00, LTLE)
                            If (LEqual (Arg2, 0x0378))
                            {
                                Store (0x00, LTDR)
                            }

                            If (LEqual (Arg2, 0x0278))
                            {
                                Store (0x01, LTDR)
                            }

                            If (LEqual (Arg2, 0x03BC))
                            {
                                Store (0x02, LTDR)
                            }

                            If (Arg1)
                            {
                                Store (0x01, LTLE)
                            }
                        }
                        Case (0x03)
                        {
                            Store (0x00, FDLE)
                            If (LEqual (Arg2, 0x03F0))
                            {
                                Store (0x00, FDDR)
                            }

                            If (LEqual (Arg2, 0x0370))
                            {
                                Store (0x01, FDDR)
                            }

                            If (Arg1)
                            {
                                Store (0x01, FDLE)
                            }
                        }
                        Case (0x08)
                        {
                            If (LEqual (Arg2, 0x0200))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, GLLE)
                                }
                                Else
                                {
                                    Store (0x00, GLLE)
                                }
                            }

                            If (LEqual (Arg2, 0x0208))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, GHLE)
                                }
                                Else
                                {
                                    Store (0x00, GHLE)
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (LEqual (Arg2, 0x0200))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, GLLE)
                                }
                                Else
                                {
                                    Store (0x00, GLLE)
                                }
                            }

                            If (LEqual (Arg2, 0x0208))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, GHLE)
                                }
                                Else
                                {
                                    Store (0x00, GHLE)
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (LOr (LEqual (Arg2, 0x60), LEqual (Arg2, 0x64)))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, KCLE)
                                }
                                Else
                                {
                                    Store (0x00, KCLE)
                                }
                            }
                        }
                        Case (0x0B)
                        {
                            If (LOr (LEqual (Arg2, 0x62), LEqual (Arg2, 0x66)))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, MCLE)
                                }
                                Else
                                {
                                    Store (0x00, MCLE)
                                }
                            }
                        }
                        Case (0x0C)
                        {
                            If (LEqual (Arg2, 0x2E))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, C1LE)
                                }
                                Else
                                {
                                    Store (0x00, C1LE)
                                }
                            }

                            If (LEqual (Arg2, 0x4E))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, C2LE)
                                }
                                Else
                                {
                                    Store (0x00, C2LE)
                                }
                            }
                        }
                        Case (0x0D)
                        {
                            If (LEqual (Arg2, 0x2E))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, C1LE)
                                }
                                Else
                                {
                                    Store (0x00, C1LE)
                                }
                            }

                            If (LEqual (Arg2, 0x4E))
                            {
                                If (Arg1)
                                {
                                    Store (0x01, C2LE)
                                }
                                Else
                                {
                                    Store (0x00, C2LE)
                                }
                            }
                        }

                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Method (SPTS, 1, NotSerialized)
                {
                    Store (One, SLPX)
                    Store (One, SLPE)
                }

                Method (SWAK, 1, NotSerialized)
                {
                    Store (Zero, SLPE)
                    If (RTCS){}
                    Else
                    {
                        Notify (PWRB, 0x02)
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y01)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y02)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y03)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y04)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (LAnd (LLess (SP1O, 0x03F0), LGreater (SP1O, 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._LEN, GPIL)  // _LEN: Length
                            Store (SP1O, GPI0)
                            Store (SP1O, GPI1)
                            Store (0x02, GPIL)
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y02._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y02._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y02._LEN, GPL1)  // _LEN: Length
                            Store (IO1B, GP10)
                            Store (IO1B, GP11)
                            Store (IO1L, GPL1)
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y03._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y03._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y03._LEN, GPL2)  // _LEN: Length
                            Store (IO2B, GP20)
                            Store (IO2B, GP21)
                            Store (IO2L, GPL2)
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y04._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y04._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y04._LEN, GPL3)  // _LEN: Length
                            Store (IO3B, GP30)
                            Store (IO3B, GP31)
                            Store (IO3L, GPL3)
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y05._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y05._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y05._LEN, GPL4)  // _LEN: Length
                            Store (IO4B, GP40)
                            Store (IO4B, GP41)
                            Store (IO4L, GPL4)
                        }

                        Return (CRS)
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        0x01, 
                        0x00, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0xFFFF)
                        Store (ENTK, INDX)
                        Store (ENTK, INDX)
                        Store (Arg0, LDN)
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Store (EXTK, INDX)
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        And (OPT0, 0x02, Local0)
                        EXFG ()
                        Return (Local0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        And (OPT0, 0x10, Local0)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (Index (DCAT, Arg0)))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Store (ACTR, Local0)
                        Or (ShiftLeft (IOAH, 0x08), IOAL, Local1)
                        EXFG ()
                        If (LEqual (Local0, 0xFF))
                        {
                            Return (0x00)
                        }

                        And (Local0, 0x01, Local0)
                        If (LLess (Arg0, 0x10))
                        {
                            Or (IOST, ShiftLeft (Local0, Arg0), IOST)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf (LLess (Arg0, 0x10))
                        {
                            If (And (ShiftLeft (0x01, Arg0), IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (0x00)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (LAnd (LLess (DMCH, 0x04), LNotEqual (And (DMCH, 0x03, Local1), 0x00)))
                        {
                            RDMA (Arg0, Arg1, Increment (Local1))
                        }

                        Store (Arg1, ACTR)
                        ShiftLeft (IOAH, 0x08, Local1)
                        Or (IOAL, Local1, Local1)
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y08)
                        IRQNoFlags (_Y06)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y07)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y06._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.LPC0.SIO1._Y07._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y08._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y08._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.LPC0.SIO1._Y08._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y0B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y0C)
                        IRQNoFlags (_Y09)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y0A)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y09._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0A._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0B._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0B._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0B._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0C._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0C._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0C._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IRQ (Level, ActiveLow, Shared, _Y0D)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y0E)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0D._INT, IRQT)  // _INT: Interrupts
                    CreateBitField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0D._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0E._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0F._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0F._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0F._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO11)
                        Or (IOAL, IO11, IO11)
                        Store (IO11, IO12)
                        Store (0x08, LEN1)
                        If (INTR)
                        {
                            ShiftLeft (0x01, INTR, IRQM)
                        }
                        Else
                        {
                            Store (0x00, IRQM)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, 0x00)))
                        {
                            Store (0x00, DMAM)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (0x01, Local1, DMAM)
                        }

                        EXFG ()
                        Return (CRS1)
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO21)
                        Or (IOAL, IO21, IO21)
                        Store (IO21, IO22)
                        Store (0x08, LEN2)
                        ShiftLeft (IOH2, 0x08, IO31)
                        Or (IOL2, IO31, IO31)
                        Store (IO31, IO32)
                        Store (0x08, LEN3)
                        If (INTR)
                        {
                            ShiftLeft (0x01, INTR, IRQE)
                        }
                        Else
                        {
                            Store (0x00, IRQE)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, 0x00)))
                        {
                            Store (0x00, DMAE)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (0x01, Local1, DMAE)
                        }

                        EXFG ()
                        Return (CRS2)
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO41)
                        Or (IOAL, IO41, IO41)
                        Store (IO41, IO42)
                        Store (0x08, LEN4)
                        If (INTR)
                        {
                            ShiftLeft (0x01, INTR, IRQT)
                        }
                        Else
                        {
                            Store (0x00, IRQT)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, 0x00)))
                        {
                            Store (0x00, DMAT)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (0x01, Local1, DMAT)
                        }

                        EXFG ()
                        Return (CRS3)
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (And (LEqual (Arg1, 0x02), LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            And (IO11, 0xFF, IOAL)
                            ShiftRight (IO11, 0x08, IOAH)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                Subtract (Local0, 0x01, INTR)
                            }
                            Else
                            {
                                Store (0x00, INTR)
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                Subtract (Local0, 0x01, DMCH)
                            }
                            Else
                            {
                                Store (0x04, DMCH)
                            }

                            EXFG ()
                            DCNT (Arg1, 0x01)
                            Store (Arg1, Local2)
                            If (LGreater (Local2, 0x00))
                            {
                                Subtract (Local2, 0x01, Local2)
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        And (IO21, 0xFF, IOAL)
                        ShiftRight (IO21, 0x08, IOAH)
                        And (IO31, 0xFF, IOL2)
                        ShiftRight (IO31, 0x08, IOH2)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            Subtract (Local0, 0x01, INTR)
                        }
                        Else
                        {
                            Store (0x00, INTR)
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            Subtract (Local0, 0x01, DMCH)
                        }
                        Else
                        {
                            Store (0x04, DMCH)
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                        Store (Arg1, Local2)
                        If (LGreater (Local2, 0x00))
                        {
                            Subtract (Local2, 0x01, Local2)
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        And (IO41, 0xFF, IOAL)
                        ShiftRight (IO41, 0x08, IOAH)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            Subtract (Local0, 0x01, INTR)
                        }
                        Else
                        {
                            Store (0x00, INTR)
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            Subtract (Local0, 0x01, DMCH)
                        }
                        Else
                        {
                            Store (0x04, DMCH)
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                        Store (Arg1, Local2)
                        If (LGreater (Local2, 0x00))
                        {
                            Subtract (Local2, 0x01, Local2)
                        }
                    }

                    Name (PMFG, 0x00)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Store ("SIOS", Debug)
                        If (LNotEqual (0x05, Arg0))
                        {
                            ENFG (0x0A)
                            If (LEqual (Arg0, One))
                            {
                                And (OPT6, 0xCF, OPT6)
                                If (KBFG)
                                {
                                    Or (OPT6, 0x10, OPT6)
                                }
                                Else
                                {
                                    And (OPT6, 0xEF, OPT6)
                                }

                                If (MSFG)
                                {
                                    Or (OPT6, 0x20, OPT6)
                                }
                                Else
                                {
                                    And (OPT6, 0xDF, OPT6)
                                }

                                Store (0xFF, OPT3)
                                Store (0xFF, OPT4)
                                Or (OPT2, 0x01, OPT2)
                            }

                            If (LGreaterEqual (Arg0, 0x03))
                            {
                                And (RGE0, 0x9F, RGE0)
                                Store (RGE3, Local0)
                                And(Local0, Ones, Local0)
                                Sleep (0xC8)
                                If (KBFG)
                                {
                                    Or (RGE0, 0x41, RGE0)
                                }
                                Else
                                {
                                    And (RGE0, 0xBE, RGE0)
                                }

                                If (MSFG)
                                {
                                    Or (RGE0, 0x22, RGE0)
                                }
                                Else
                                {
                                    And (RGE0, 0xDD, RGE0)
                                }

                                Or (RGE4, 0x01, RGE4)
                            }

                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Store ("SIOW", Debug)
                        ENFG (0x0A)
                        If (LEqual (Arg0, One))
                        {
                            Store (OPT3, PMFG)
                            Store (0xFF, OPT3)
                            And (OPT6, 0xCF, OPT6)
                            And (OPT2, 0xFE, OPT2)
                        }

                        If (LGreaterEqual (Arg0, 0x03))
                        {
                            Store (RGE3, PMFG)
                            Store (RGE3, Local0)
                            And(Local0, Ones, Local0)
                            And (RGE0, 0x9F, RGE0)
                            And (RGE4, 0xFE, RGE4)
                        }

                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If (And (PMFG, 0x08)){}
                        If (And (PMFG, 0x10)){}
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501"))  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (0x00))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (0x00, 0x00)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (0x00, 0x00))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, 0x00)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303"))  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (And (IOST, 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        Store (Arg0, KBFG)
                    }

                    Scope (\)
                    {
                        Name (KBFG, 0x01)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03"))  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (And (IOST, 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (And (IOST, 0x0400))
                        {
                            Return (CRS1)
                        }
                        Else
                        {
                            Return (CRS2)
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        Store (Arg0, MSFG)
                    }

                    Scope (\)
                    {
                        Name (MSFG, 0x01)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08"))  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x00)
                    }
                }
            }

            Device (IP2P)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x03))
                }
            }

            Device (SAT2)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (LEqual (Or (Arg0, Arg1), 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (And (LEqual (Arg0, 0x00), LEqual (Arg1, 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return (Multiply (0x1E, Subtract (0x09, Add (Arg2, Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        If (LEqual (Arg1, 0x01))
                        {
                            If (LEqual (Arg4, 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If (LEqual (Arg2, 0x01))
                        {
                            Return (Multiply (0x0F, Subtract (0x04, Arg4)))
                        }

                        Return (Multiply (0x1E, Subtract (0x04, Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Store (0x00, Local0)
                    Or (Arg1, Local0, Local0)
                    Or (ShiftLeft (Arg0, 0x01), Local0, Local0)
                    Or (ShiftLeft (Arg2, 0x03), Local0, Local0)
                    Or (ShiftLeft (Arg3, 0x02), Local0, Local0)
                    Or (ShiftLeft (Arg4, 0x04), Local0, Local0)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                   
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (LOr (LEqual (Arg0, 0x00), LEqual (Arg0, 0xFFFFFFFF)))
                    {
                        Return (PBUF)
                    }

                    If (LGreater (Arg0, 0xF0))
                    {
                        Store (0x01, DMAE)
                        Store (0x00, PIOT)
                    }
                    Else
                    {
                        Store (0x01, FAST)
                        If (And (Arg1, 0x02))
                        {
                            If (And (LEqual (Arg0, 0x78), And (Arg2, 0x02)))
                            {
                                Store (0x03, RCT)
                                Store (0x02, ISP)
                                Store (0x04, PIOT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0xB4), And (Arg2, 0x01)))
                            {
                                Store (0x01, RCT)
                                Store (0x02, ISP)
                                Store (0x03, PIOT)
                            }
                            Else
                            {
                                Store (0x00, RCT)
                                Store (0x01, ISP)
                                Store (0x02, PIOT)
                            }
                        }
                    }

                    Return (PBUF)
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (LOr (LEqual (Arg0, 0x00), LEqual (Arg0, 0xFFFFFFFF)))
                    {
                        Return (PBUF)
                    }

                    If (LLessEqual (Arg0, 0x78))
                    {
                        If (And (Arg1, 0x04))
                        {
                            Store (0x01, UDME)
                            If (And (LEqual (Arg0, 0x0F), And (Arg2, 0x40)))
                            {
                                Store (0x01, UDMT)
                                Store (0x01, PCB)
                                Store (0x02, PCT)
                                Store (0x06, DMAT)
                            }
                            ElseIf (And (LEqual (Arg0, 0x14), And (Arg2, 0x20)))
                            {
                                Store (0x01, UDMT)
                                Store (0x01, PCB)
                                Store (0x01, PCT)
                                Store (0x05, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x1E), And (Arg2, 0x10)))
                            {
                                Store (0x01, PCB)
                                Store (0x02, PCT)
                                Store (0x04, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x2D), And (Arg2, 0x08)))
                            {
                                Store (0x01, PCB)
                                Store (0x01, PCT)
                                Store (0x03, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x3C), And (Arg2, 0x04)))
                            {
                                Store (0x02, PCT)
                                Store (0x02, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x5A), And (Arg2, 0x02)))
                            {
                                Store (0x01, PCT)
                                Store (0x01, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x78), And (Arg2, 0x01)))
                            {
                                Store (0x00, DMAT)
                            }
                        }
                    }

                    Return (PBUF)
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        Store (GPIO (PFT0, PDE0, PRT0, PIP0), PIO0)
                        If (And (PSIT, 0x01))
                        {
                            Store (GPIO (PFT1, PDE1, PRT1, PIP1), PIO1)
                        }
                        Else
                        {
                            Store (GPIO (PFT1, PDE1, PRT0, PIP0), PIO1)
                        }

                        If (LEqual (PIO0, 0xFFFFFFFF))
                        {
                            Store (PIO0, DMA0)
                        }
                        Else
                        {
                            Store (GDMA (UDM0, PUM0, PCB0, And (PCCR, 0x01), PCT0), DMA0)
                            If (LGreater (DMA0, PIO0))
                            {
                                Store (PIO0, DMA0)
                            }
                        }

                        If (LEqual (PIO1, 0xFFFFFFFF))
                        {
                            Store (PIO1, DMA1)
                        }
                        Else
                        {
                            Store (GDMA (UDM1, PUM1, PCB1, And (PCCR, 0x02), PCT1), DMA1)
                            If (LGreater (DMA1, PIO1))
                            {
                                Store (PIO1, DMA1)
                            }
                        }

                        Store (SFLG (PIE0, UDM0, PIE1, UDM1, 0x01), FLAG)
                        Return (PBUF)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If (And (FLAG, 0x10))
                        {
                            Store (0x01, PSIT)
                        }

                        Store (SPIO (PIO0, RPS0, IOM0), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (RCT, PRT0)
                            Store (ISP, PIP0)
                            Store (FAST, PFT0)
                            Store (DMAE, PDE0)
                            Store (TPIO, TPI0)
                        }

                        Store (SPIO (PIO1, RPS1, IOM1), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (FAST, PFT1)
                            Store (DMAE, PDE1)
                            Store (TPIO, TPI1)
                            If (And (PSIT, 0x01))
                            {
                                Store (RCT, PRT1)
                                Store (ISP, PIP1)
                            }
                            Else
                            {
                                Store (RCT, PRT0)
                                Store (ISP, PIP0)
                            }
                        }

                        If (And (FLAG, 0x01))
                        {
                            Store (SDMA (DMA0, RPS0, DMM0), DMAT)
                            Store (PCT, PCT0)
                            Store (PCB, PCB0)
                            Store (UDME, UDM0)
                            Store (UDMT, PUM0)
                            Store (TDMA, TDM0)
                        }
                        Else
                        {
                            Store (0x00, UDM0)
                        }

                        If (And (FLAG, 0x04))
                        {
                            Store (SDMA (DMA1, RPS1, DMM1), DMAT)
                            Store (PCT, PCT1)
                            Store (PCB, PCB1)
                            Store (UDME, UDM1)
                            Store (UDMT, PUM1)
                            Store (TDMA, TDM1)
                        }
                        Else
                        {
                            Store (0x00, UDM1)
                        }

                        If (And (FLAG, 0x02))
                        {
                            Store (0x01, PIE0)
                        }

                        If (And (FLAG, 0x08))
                        {
                            Store (0x01, PIE1)
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF             
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            Store (TPI0, PIO0)
                            Or (PIO0, 0x08, PIO0)
                            If (And (UDM0, 0x01))
                            {
                                Store (TDM0, DMA0)
                                Or (DMA0, 0x40, DMA0)
                            }
                            Else
                            {
                                Store (TPI0, DMA0)
                                If (LNotEqual (DMA0, 0x00))
                                {
                                    Subtract (DMA0, 0x02, DMA0)
                                }

                                Or (DMA0, 0x20, DMA0)
                            }

                            Return (ATA0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF             
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            Store (TPI1, PIO1)
                            Or (PIO1, 0x08, PIO1)
                            If (And (UDM1, 0x01))
                            {
                                Store (TDM1, DMA1)
                                Or (DMA1, 0x40, DMA1)
                            }
                            Else
                            {
                                Store (TPI1, DMA1)
                                If (LNotEqual (DMA1, 0x00))
                                {
                                    Subtract (DMA1, 0x02, DMA1)
                                }

                                Or (DMA1, 0x20, DMA1)
                            }

                            Return (ATA1)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        Store (GPIO (SFT0, SDE0, SRT0, SIP0), PIO0)
                        If (And (SSIT, 0x01))
                        {
                            Store (GPIO (SFT1, SDE1, SRT1, SIP1), PIO1)
                        }
                        Else
                        {
                            Store (GPIO (SFT1, SDE1, SRT0, SIP0), PIO1)
                        }

                        If (LEqual (PIO0, 0xFFFFFFFF))
                        {
                            Store (PIO0, DMA0)
                        }
                        Else
                        {
                            Store (GDMA (UDM2, SUM0, SCB0, And (SCCR, 0x01), SCT0), DMA0)
                            If (LGreater (DMA0, PIO0))
                            {
                                Store (PIO0, DMA0)
                            }
                        }

                        If (LEqual (PIO1, 0xFFFFFFFF))
                        {
                            Store (PIO1, DMA1)
                        }
                        Else
                        {
                            Store (GDMA (UDM3, SUM1, SCB1, And (SCCR, 0x02), SCT1), DMA1)
                            If (LGreater (DMA1, PIO1))
                            {
                                Store (PIO1, DMA1)
                            }
                        }

                        Store (SFLG (SIE0, UDM2, SIE1, UDM3, 0x01), FLAG)
                        Return (PBUF)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        Store (Arg0, STMI)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If (And (FLAG, 0x10))
                        {
                            Store (0x01, SSIT)
                        }

                        Store (SPIO (PIO0, RPS0, IOM0), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (RCT, SRT0)
                            Store (ISP, SIP0)
                            Store (FAST, SFT0)
                            Store (DMAE, SDE0)
                            Store (TPIO, TPI0)
                        }

                        Store (SPIO (PIO1, RPS1, IOM1), IOTM)
                        Store (IOTM, POT2)
                        If (Or (DMAE, FAST))
                        {
                            Store (FAST, SFT1)
                            Store (DMAE, SDE1)
                            Store (TPIO, TPI1)
                            If (And (SSIT, 0x01))
                            {
                                Store (RCT, SRT1)
                                Store (ISP, SIP1)
                            }
                            Else
                            {
                                Store (RCT, SRT0)
                                Store (ISP, SIP0)
                            }
                        }

                        If (And (FLAG, 0x01))
                        {
                            Store (SDMA (DMA0, RPS0, DMM0), DMAT)
                            Store (PCT, SCT0)
                            Store (PCB, SCB0)
                            Store (UDME, UDM2)
                            Store (UDMT, SUM0)
                            Store (TDMA, TDM0)
                        }
                        Else
                        {
                            Store (0x00, UDM2)
                        }

                        If (And (FLAG, 0x04))
                        {
                            Store (SDMA (DMA1, RPS1, DMM1), DMAT)
                            Store (PCT, SCT1)
                            Store (PCB, SCB1)
                            Store (UDME, UDM3)
                            Store (UDMT, SUM1)
                            Store (TDMA, TDM1)
                        }
                        Else
                        {
                            Store (0x00, UDM3)
                        }

                        If (And (FLAG, 0x02))
                        {
                            Store (0x01, SIE0)
                        }

                        If (And (FLAG, 0x08))
                        {
                            Store (0x01, SIE1)
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF             
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            Store (TPI0, PIO0)
                            Or (PIO0, 0x08, PIO0)
                            If (And (UDM2, 0x01))
                            {
                                Store (TDM0, DMA0)
                                Or (DMA0, 0x40, DMA0)
                            }
                            Else
                            {
                                Store (TPI0, DMA0)
                                If (LNotEqual (DMA0, 0x00))
                                {
                                    Subtract (DMA0, 0x02, DMA0)
                                }

                                Or (DMA0, 0x20, DMA0)
                            }

                            Return (ATA0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF             
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            Store (TPI1, PIO1)
                            Or (PIO1, 0x08, PIO1)
                            If (And (UDM3, 0x01))
                            {
                                Store (TDM1, DMA1)
                                Or (DMA1, 0x40, DMA1)
                            }
                            Else
                            {
                                Store (TPI1, DMA1)
                                If (LNotEqual (DMA1, 0x00))
                                {
                                    Subtract (DMA1, 0x02, DMA1)
                                }

                                Or (DMA1, 0x20, DMA1)
                            }

                            Return (ATA1)
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (TERM)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                Name (XRST, 0x00)
                Name (XUSB, 0x00)
                OperationRegion (XPRT, PCI_Config, 0x74, 0x6C)
                Field (XPRT, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x5C), 
                    PR2,    32, 
                    PR2M,   32, 
                    PR3,    32, 
                    PR3M,   32
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        Store (0x01, PMEE)
                    }
                    Else
                    {
                        Store (0x00, PMEE)
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If (LEqual (Arg0, 0x02))
                    {
                        If (LEqual (Arg1, 0x01))
                        {
                            Store (0x01, OPAC)
                        }
                        Else
                        {
                            Store (0x00, OPAC)
                        }
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (OPAC, 0x01))
                    {
                        Store (0x01, PMES)
                        Store (0x00, PMEE)
                    }
                }

                Method (POSC, 3, NotSerialized)
                {
                    CreateDWordField (Arg2, 0x00, CDW1)
                    CreateDWordField (Arg2, 0x04, CDW2)
                    CreateDWordField (Arg2, 0x08, CDW3)
                    If (LAnd (LGreaterEqual (OSYS, 0x09), LLessEqual (OSYS, 0x0C)))
                    {
                        If (LLess (Arg0, 0x02))
                        {
                            Or (CDW1, 0x08, CDW1)
                        }
                    }
                    ElseIf (LNotEqual (Arg0, 0x01))
                    {
                        Or (CDW1, 0x08, CDW1)
                    }

                    If (LEqual (XHMD, 0x00))
                    {
                        Or (CDW1, 0x02, CDW1)
                    }

                    If (LEqual (And (CDW1, 0x0E), 0x00))
                    {
                        If (LNot (And (CDW1, 0x01)))
                        {
                            If (And (CDW3, 0x01))
                            {
                                ESEL ()
                                Store (0x00, XHMD)
                            }

                            If (And (CDW2, 0x01))
                            {
                                XSEL (0x00)
                            }
                            Else
                            {
                                ESEL ()
                            }
                        }
                    }

                    Return (Arg2)
                }

                Method (XSEL, 1, Serialized)
                {
                    If (LOr (LOr (LEqual (XHMD, 0x02), LEqual (XHMD, 0x03)), Arg0))
                    {
                        If (LEqual (XHMD, 0x03))
                        {
                            Store (0x01, ^^LPC0.XSMB)
                        }

                        Store (0x01, XUSB)
                        Store (0x01, XRST)
                        Store (0x00, Local0)
                        And (PR3, 0xFFFFFFC0, Local0)
                        Or (Local0, PR3M, PR3)
                        Store (0x00, Local0)
                        And (PR2, 0xFFFF8000, Local0)
                        Or (Local0, PR2M, PR2)
                    }
                }

                Method (ESEL, 0, Serialized)
                {
                    If (LOr (LEqual (XHMD, 0x02), LEqual (XHMD, 0x03)))
                    {
                        And (PR3, 0xFFFFFFC0, PR3)
                        And (PR2, 0xFFFF8000, PR2)
                        Store (0x00, XUSB)
                        Store (0x00, XRST)
                    }
                }

                Method (XWAK, 0, Serialized)
                {
                    If (LOr (LEqual (XUSB, 0x01), LEqual (XRST, 0x01)))
                    {
                        XSEL (0x01)
                        Notify (XHCI, 0x00)
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (RHUB)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (HS01)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                If (LEqual (PLAT, 0x1B))
                                {
                                    Store (0x00, Index (UPCP, 0x00))
                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LEqual (PLAT, 0x05))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0xC1, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LEqual (PLAT, 0x00))
                            {
                                Store (One, VISB)
                                Store (0x0C, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS02)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D)){}
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LEqual (PLAT, 0x05))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LEqual (PLAT, 0x1B))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (One, VISB)
                                Store (0x0C, PANL)
                            }

                            If (LEqual (PLAT, 0x00))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LEqual (PLAT, 0x1B))
                            {
                                Store (One, VISB)
                                Store (0x28, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS03)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x03)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x04)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0xC1, 0x81, 0x01, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x2E, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS04)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LEqual (PLAT, 0x01))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LEqual (PLAT, 0x05))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS05)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                If (LEqual (PLAT, 0x1B))
                                {
                                    Store (0x00, Index (UPCP, 0x00))
                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LEqual (PLAT, 0x05))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (0x01)
                                {
                                    If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0xC1, 0x82, 0x02, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x09), LEqual (PLAT, 0x13)))
                            {
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (0x01)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x04, PANL)
                                }
                            }
                            ElseIf (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS06)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x0A)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x0B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x07)
                                    {
                                        If (0x00)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x00)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x03)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x04)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x05)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (0x01)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x08, PANL)
                                }
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS07)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x00)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x07)
                                    {
                                        If (0x00)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x00)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x03)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x04)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x05)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (0x01)
                                {
                                    If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }

                                If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0xC1, 0x83, 0x03, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x15, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (0x01)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x08, PANL)
                                }
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS08)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x00)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (0x08, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (0x08, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS09)
                    {
                        Name (_ADR, 0x09)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x0A)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x0B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (0x00)
                                {
                                    If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0xC1, 0x84, 0x04, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (0x01)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x05, PANL)
                                }
                            }
                            ElseIf (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS10)
                    {
                        Name (_ADR, 0x0A)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x0A)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x0B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (0x00)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x08, PANL)
                                }
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            Return (PLDP)
                        }

                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x68, 0x41, 0x85, 0x00, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x69, 0x41, 0x05, 0x01, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x69, 0x41, 0x85, 0x01, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x69, 0x41, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }
                    }

                    Device (HS11)
                    {
                        Name (_ADR, 0x0B)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x01)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (0x00)
                                {
                                    If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0xC1, 0x85, 0x05, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (0x00)
                            {
                                If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                {
                                    Store (One, VISB)
                                    Store (0x04, PANL)
                                }
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (0x00)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x08, PANL)
                                }
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (0x08, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS12)
                    {
                        Name (_ADR, 0x0C)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (0x01)
                                {
                                    If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }

                                If (0x01)
                                {
                                    If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x4C, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (0x08, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (0x01)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x04, PANL)
                                }
                            }
                            ElseIf (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS13)
                    {
                        Name (_ADR, 0x0D)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x00)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0xC1, 0x86, 0x06, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (0x08, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (0x08, PANL)
                            }

                            If (0x00)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (0x08, PANL)
                                }
                            }

                            Return (PLDP)
                        }
                    }

                    Device (HS14)
                    {
                        Name (_ADR, 0x0E)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x01)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x12)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            Store (0x00, Index (UPCP, 0x00))
                                        }
                                    }

                                }
                            }
                            Else
                            {
                                Store (0x00, Index (UPCP, 0x00))
                                If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (0x00)
                                {
                                    If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }

                                If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LEqual (PLAT, 0x05))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }

                                If (0x00)
                                {
                                    If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                    {
                                        Store (0xFF, Index (UPCP, 0x00))
                                    }
                                }

                                If (LEqual (PLAT, 0x1B))
                                {
                                    Store (0xFF, Index (UPCP, 0x00))
                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (0x00)
                            {
                                If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                                {
                                    Store (One, VISB)
                                    Store (0x04, PANL)
                                }
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x08, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                            }

                            If (0x00)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x04, PANL)
                                }
                            }

                            If (LEqual (PLAT, 0x1B))
                            {
                                Store (One, VISB)
                                Store (0x20, PANL)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (SSP1)
                    {
                        Name (_ADR, 0x10)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x04, GTOK)
                                Store (0x04, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x09, GTOK)
                                Store (0x09, GPOS)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x09, GTOK)
                                Store (0x09, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x05, GTOK)
                                Store (0x05, GPOS)
                            }

                            If (0x01)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x04, PANL)
                                    Store (0x0C, GTOK)
                                    Store (0x0C, GPOS)
                                }
                            }
                            ElseIf (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x0E, GTOK)
                                Store (0x0E, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (SSP2)
                    {
                        Name (_ADR, 0x11)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Switch (ToInteger (PLAT))
                            {
                                Case (0x1B)
                                {
                                    Store (0x00, Index (UPCP, 0x00))
                                }

                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x15, PANL)
                                Store (0x07, GTOK)
                                Store (0x07, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x0E, GTOK)
                                Store (0x0E, GPOS)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x0E, GTOK)
                                Store (0x0E, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (0x01)
                            {
                                If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                                {
                                    Store (One, VISB)
                                    Store (0x04, PANL)
                                    Store (0x05, GTOK)
                                    Store (0x05, GPOS)
                                }
                            }
                            ElseIf (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x09, GTOK)
                                Store (0x09, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (SSP3)
                    {
                        Name (_ADR, 0x12)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x03)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x04)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x05)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x07)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x08)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (One, VISB)
                                Store (0x0C, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            If (LEqual (PLAT, 0x00))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x03, GTOK)
                                Store (0x03, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x03, GTOK)
                                Store (0x03, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x03, GTOK)
                                Store (0x03, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x0D, GTOK)
                                Store (0x0D, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                                Store (0x03, GTOK)
                                Store (0x03, GPOS)
                            }

                            If (LEqual (PLAT, 0x1B))
                            {
                                Store (One, VISB)
                                Store (0x28, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (SSP4)
                    {
                        Name (_ADR, 0x13)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x03)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x04)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x05)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x2E, PANL)
                                Store (0x03, GTOK)
                                Store (0x03, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x04, GTOK)
                                Store (0x04, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x04, GTOK)
                                Store (0x04, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x04, GTOK)
                                Store (0x04, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x0E, GTOK)
                                Store (0x0E, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                                Store (0x04, GTOK)
                                Store (0x04, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                                Store (0x03, GTOK)
                                Store (0x03, GPOS)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (SSP5)
                    {
                        Name (_ADR, 0x14)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If (LGreaterEqual (OSYS, 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x1B)
                                    {
                                        Store (0x00, Index (UPCP, 0x00))
                                    }

                                }
                            }

                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LOr (LEqual (PLAT, 0x00), LEqual (PLAT, 0x01)))
                            {
                                Store (One, VISB)
                                Store (0x4C, PANL)
                                Store (0x0C, GTOK)
                                Store (0x0C, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x09, GTOK)
                                Store (0x09, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x09, GTOK)
                                Store (0x09, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x05, GTOK)
                                Store (0x05, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x07, GTOK)
                                Store (0x07, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                                Store (0x05, GTOK)
                                Store (0x05, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            Return (PLDP)
                        }
                    }

                    Device (SSP6)
                    {
                        Name (_ADR, 0x15)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x43, 0x07, PANL)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (Index (PLDP, 0x00)), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (Index (PLDP, 0x00)), 0x40, VISB)
                            If (LEqual (PLAT, 0x01))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LEqual (PLAT, 0x00))
                            {
                                Store (One, VISB)
                                Store (0x0C, PANL)
                                Store (0x01, GTOK)
                                Store (0x01, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x03), LEqual (PLAT, 0x04)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LEqual (PLAT, 0x05))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x13), LEqual (PLAT, 0x16)))
                            {
                                Store (0x05, PANL)
                                Store (0x0A, GTOK)
                                Store (0x0A, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x14), LEqual (PLAT, 0x15)))
                            {
                                Store (0x05, PANL)
                                Store (0x0A, GTOK)
                                Store (0x0A, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x11), LEqual (PLAT, 0x12)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x06, GTOK)
                                Store (0x06, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0A), LEqual (PLAT, 0x0B)))
                            {
                                Store (One, VISB)
                                Store (0x04, PANL)
                                Store (0x08, GTOK)
                                Store (0x08, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x0F), LEqual (PLAT, 0x10)))
                            {
                                Store (One, VISB)
                                Store (0x03, PANL)
                                Store (0x06, GTOK)
                                Store (0x06, GPOS)
                            }

                            If (LOr (LEqual (PLAT, 0x07), LEqual (PLAT, 0x08)))
                            {
                                Store (One, VISB)
                                Store (0x05, PANL)
                                Store (0x02, GTOK)
                                Store (0x02, GPOS)
                            }

                            If (LEqual (PLAT, 0x1B))
                            {
                                Store (One, VISB)
                                Store (0x28, PANL)
                                Store (0x0E, GTOK)
                                Store (0x0E, GPOS)
                            }

                            Return (PLDP)
                        }

                        Device (PRT1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x68, 0x41, 0x85, 0x00, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x69, 0x41, 0x05, 0x01, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x69, 0x41, 0x85, 0x01, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0x69, 0x41, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00,
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                    }
                                })
                                Return (PLDP)
                            }
                        }
                    }
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If (LEqual (Arg0, 0x02))
                    {
                        If (LEqual (Arg1, 0x01))
                        {
                            Store (One, OPAC)
                        }
                        Else
                        {
                            Store (One, OPAC)
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        Store (Ones, PWUC)
                    }
                    Else
                    {
                        Store (0x00, PWUC)
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (OPAC, One))
                    {
                        Store (0x01, PMES)
                        Store (0x00, PMEE)
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If (LEqual (Arg1, 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                           
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                           
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If (LEqual (SDGV, 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV)
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If (LEqual (Arg1, 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                           
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                           
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If (LEqual (SDGV, 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV)
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If (LEqual (Arg1, 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                           
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                           
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If (LEqual (SDGV, 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV)
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR17)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If (LEqual (Arg1, 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                           
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                           
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If (LEqual (SDGV, 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV)
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR18)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If (LEqual (Arg0, 0x02))
                    {
                        If (LEqual (Arg1, 0x01))
                        {
                            Store (One, OPAC)
                        }
                        Else
                        {
                            Store (One, OPAC)
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        Store (Ones, PWUC)
                    }
                    Else
                    {
                        Store (0x00, PWUC)
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (OPAC, One))
                    {
                        Store (0x01, PMES)
                        Store (0x00, PMEE)
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If (LEqual (Arg1, 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                           
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                           
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If (LEqual (SDGV, 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV)
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If (LEqual (Arg1, 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                           
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                           
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If (LEqual (SDGV, 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV)
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP)
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                    }
                                })
                                Return (PLDP)
                            }
                        }
                    }
                }
            }

            Device (ALZA)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }

            Device (HECI)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00160001)  // _ADR: Address
            }

            Device (IDER)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
            }

            Device (MEKT)
            {
                Name (_ADR, 0x00160003)  // _ADR: Address
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG15)
                    }

                    Return (PG15)
                }

                Device (D084)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG16)
                    }

                    Return (PG16)
                }

                Device (D07D)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }

                Device (D082)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG18)
                    }

                    Return (PG18)
                }

                Device (D083)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG19)
                    }

                    Return (PG19)
                }

                Device (D07E)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (EVMR)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (EVS0)
            {
                Name (_ADR, 0x00110001)  // _ADR: Address
            }

            Device (EVS1)
            {
                Name (_ADR, 0x00110002)  // _ADR: Address
            }

            Device (EVS2)
            {
                Name (_ADR, 0x00110003)  // _ADR: Address
            }

            Device (EVSS)
            {
                Name (_ADR, 0x00110004)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (LEqual (Or (Arg0, Arg1), 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (And (LEqual (Arg0, 0x00), LEqual (Arg1, 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return (Multiply (0x1E, Subtract (0x09, Add (Arg2, Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        If (LEqual (Arg1, 0x01))
                        {
                            If (LEqual (Arg4, 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If (LEqual (Arg2, 0x01))
                        {
                            Return (Multiply (0x0F, Subtract (0x04, Arg4)))
                        }

                        Return (Multiply (0x1E, Subtract (0x04, Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Store (0x00, Local0)
                    Or (Arg1, Local0, Local0)
                    Or (ShiftLeft (Arg0, 0x01), Local0, Local0)
                    Or (ShiftLeft (Arg2, 0x03), Local0, Local0)
                    Or (ShiftLeft (Arg3, 0x02), Local0, Local0)
                    Or (ShiftLeft (Arg4, 0x04), Local0, Local0)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                   
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (LOr (LEqual (Arg0, 0x00), LEqual (Arg0, 0xFFFFFFFF)))
                    {
                        Return (PBUF)
                    }

                    If (LGreater (Arg0, 0xF0))
                    {
                        Store (0x01, DMAE)
                        Store (0x00, PIOT)
                    }
                    Else
                    {
                        Store (0x01, FAST)
                        If (And (Arg1, 0x02))
                        {
                            If (And (LEqual (Arg0, 0x78), And (Arg2, 0x02)))
                            {
                                Store (0x03, RCT)
                                Store (0x02, ISP)
                                Store (0x04, PIOT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0xB4), And (Arg2, 0x01)))
                            {
                                Store (0x01, RCT)
                                Store (0x02, ISP)
                                Store (0x03, PIOT)
                            }
                            Else
                            {
                                Store (0x00, RCT)
                                Store (0x01, ISP)
                                Store (0x02, PIOT)
                            }
                        }
                    }

                    Return (PBUF)
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (LOr (LEqual (Arg0, 0x00), LEqual (Arg0, 0xFFFFFFFF)))
                    {
                        Return (PBUF)
                    }

                    If (LLessEqual (Arg0, 0x78))
                    {
                        If (And (Arg1, 0x04))
                        {
                            Store (0x01, UDME)
                            If (And (LEqual (Arg0, 0x0F), And (Arg2, 0x40)))
                            {
                                Store (0x01, UDMT)
                                Store (0x01, PCB)
                                Store (0x02, PCT)
                                Store (0x06, DMAT)
                            }
                            ElseIf (And (LEqual (Arg0, 0x14), And (Arg2, 0x20)))
                            {
                                Store (0x01, UDMT)
                                Store (0x01, PCB)
                                Store (0x01, PCT)
                                Store (0x05, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x1E), And (Arg2, 0x10)))
                            {
                                Store (0x01, PCB)
                                Store (0x02, PCT)
                                Store (0x04, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x2D), And (Arg2, 0x08)))
                            {
                                Store (0x01, PCB)
                                Store (0x01, PCT)
                                Store (0x03, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x3C), And (Arg2, 0x04)))
                            {
                                Store (0x02, PCT)
                                Store (0x02, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x5A), And (Arg2, 0x02)))
                            {
                                Store (0x01, PCT)
                                Store (0x01, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x78), And (Arg2, 0x01)))
                            {
                                Store (0x00, DMAT)
                            }
                        }
                    }

                    Return (PBUF)
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        Store (GPIO (PFT0, PDE0, PRT0, PIP0), PIO0)
                        If (And (PSIT, 0x01))
                        {
                            Store (GPIO (PFT1, PDE1, PRT1, PIP1), PIO1)
                        }
                        Else
                        {
                            Store (GPIO (PFT1, PDE1, PRT0, PIP0), PIO1)
                        }

                        If (LEqual (PIO0, 0xFFFFFFFF))
                        {
                            Store (PIO0, DMA0)
                        }
                        Else
                        {
                            Store (GDMA (UDM0, PUM0, PCB0, And (PCCR, 0x01), PCT0), DMA0)
                            If (LGreater (DMA0, PIO0))
                            {
                                Store (PIO0, DMA0)
                            }
                        }

                        If (LEqual (PIO1, 0xFFFFFFFF))
                        {
                            Store (PIO1, DMA1)
                        }
                        Else
                        {
                            Store (GDMA (UDM1, PUM1, PCB1, And (PCCR, 0x02), PCT1), DMA1)
                            If (LGreater (DMA1, PIO1))
                            {
                                Store (PIO1, DMA1)
                            }
                        }

                        Store (SFLG (PIE0, UDM0, PIE1, UDM1, 0x01), FLAG)
                        Return (PBUF)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If (And (FLAG, 0x10))
                        {
                            Store (0x01, PSIT)
                        }

                        Store (SPIO (PIO0, RPS0, IOM0), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (RCT, PRT0)
                            Store (ISP, PIP0)
                            Store (FAST, PFT0)
                            Store (DMAE, PDE0)
                            Store (TPIO, TPI0)
                        }

                        Store (SPIO (PIO1, RPS1, IOM1), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (FAST, PFT1)
                            Store (DMAE, PDE1)
                            Store (TPIO, TPI1)
                            If (And (PSIT, 0x01))
                            {
                                Store (RCT, PRT1)
                                Store (ISP, PIP1)
                            }
                            Else
                            {
                                Store (RCT, PRT0)
                                Store (ISP, PIP0)
                            }
                        }

                        If (And (FLAG, 0x01))
                        {
                            Store (SDMA (DMA0, RPS0, DMM0), DMAT)
                            Store (PCT, PCT0)
                            Store (PCB, PCB0)
                            Store (UDME, UDM0)
                            Store (UDMT, PUM0)
                            Store (TDMA, TDM0)
                        }
                        Else
                        {
                            Store (0x00, UDM0)
                        }

                        If (And (FLAG, 0x04))
                        {
                            Store (SDMA (DMA1, RPS1, DMM1), DMAT)
                            Store (PCT, PCT1)
                            Store (PCB, PCB1)
                            Store (UDME, UDM1)
                            Store (UDMT, PUM1)
                            Store (TDMA, TDM1)
                        }
                        Else
                        {
                            Store (0x00, UDM1)
                        }

                        If (And (FLAG, 0x02))
                        {
                            Store (0x01, PIE0)
                        }

                        If (And (FLAG, 0x08))
                        {
                            Store (0x01, PIE1)
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF             
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            Store (TPI0, PIO0)
                            Or (PIO0, 0x08, PIO0)
                            If (And (UDM0, 0x01))
                            {
                                Store (TDM0, DMA0)
                                Or (DMA0, 0x40, DMA0)
                            }
                            Else
                            {
                                Store (TPI0, DMA0)
                                If (LNotEqual (DMA0, 0x00))
                                {
                                    Subtract (DMA0, 0x02, DMA0)
                                }

                                Or (DMA0, 0x20, DMA0)
                            }

                            Return (ATA0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF             
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            Store (TPI1, PIO1)
                            Or (PIO1, 0x08, PIO1)
                            If (And (UDM1, 0x01))
                            {
                                Store (TDM1, DMA1)
                                Or (DMA1, 0x40, DMA1)
                            }
                            Else
                            {
                                Store (TPI1, DMA1)
                                If (LNotEqual (DMA1, 0x00))
                                {
                                    Subtract (DMA1, 0x02, DMA1)
                                }

                                Or (DMA1, 0x20, DMA1)
                            }

                            Return (ATA1)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        Store (GPIO (SFT0, SDE0, SRT0, SIP0), PIO0)
                        If (And (SSIT, 0x01))
                        {
                            Store (GPIO (SFT1, SDE1, SRT1, SIP1), PIO1)
                        }
                        Else
                        {
                            Store (GPIO (SFT1, SDE1, SRT0, SIP0), PIO1)
                        }

                        If (LEqual (PIO0, 0xFFFFFFFF))
                        {
                            Store (PIO0, DMA0)
                        }
                        Else
                        {
                            Store (GDMA (UDM2, SUM0, SCB0, And (SCCR, 0x01), SCT0), DMA0)
                            If (LGreater (DMA0, PIO0))
                            {
                                Store (PIO0, DMA0)
                            }
                        }

                        If (LEqual (PIO1, 0xFFFFFFFF))
                        {
                            Store (PIO1, DMA1)
                        }
                        Else
                        {
                            Store (GDMA (UDM3, SUM1, SCB1, And (SCCR, 0x02), SCT1), DMA1)
                            If (LGreater (DMA1, PIO1))
                            {
                                Store (PIO1, DMA1)
                            }
                        }

                        Store (SFLG (SIE0, UDM2, SIE1, UDM3, 0x01), FLAG)
                        Return (PBUF)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        Store (Arg0, STMI)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If (And (FLAG, 0x10))
                        {
                            Store (0x01, SSIT)
                        }

                        Store (SPIO (PIO0, RPS0, IOM0), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (RCT, SRT0)
                            Store (ISP, SIP0)
                            Store (FAST, SFT0)
                            Store (DMAE, SDE0)
                            Store (TPIO, TPI0)
                        }

                        Store (SPIO (PIO1, RPS1, IOM1), IOTM)
                        Store (IOTM, POT2)
                        If (Or (DMAE, FAST))
                        {
                            Store (FAST, SFT1)
                            Store (DMAE, SDE1)
                            Store (TPIO, TPI1)
                            If (And (SSIT, 0x01))
                            {
                                Store (RCT, SRT1)
                                Store (ISP, SIP1)
                            }
                            Else
                            {
                                Store (RCT, SRT0)
                                Store (ISP, SIP0)
                            }
                        }

                        If (And (FLAG, 0x01))
                        {
                            Store (SDMA (DMA0, RPS0, DMM0), DMAT)
                            Store (PCT, SCT0)
                            Store (PCB, SCB0)
                            Store (UDME, UDM2)
                            Store (UDMT, SUM0)
                            Store (TDMA, TDM0)
                        }
                        Else
                        {
                            Store (0x00, UDM2)
                        }

                        If (And (FLAG, 0x04))
                        {
                            Store (SDMA (DMA1, RPS1, DMM1), DMAT)
                            Store (PCT, SCT1)
                            Store (PCB, SCB1)
                            Store (UDME, UDM3)
                            Store (UDMT, SUM1)
                            Store (TDMA, TDM1)
                        }
                        Else
                        {
                            Store (0x00, UDM3)
                        }

                        If (And (FLAG, 0x02))
                        {
                            Store (0x01, SIE0)
                        }

                        If (And (FLAG, 0x08))
                        {
                            Store (0x01, SIE1)
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF             
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            Store (TPI0, PIO0)
                            Or (PIO0, 0x08, PIO0)
                            If (And (UDM2, 0x01))
                            {
                                Store (TDM0, DMA0)
                                Or (DMA0, 0x40, DMA0)
                            }
                            Else
                            {
                                Store (TPI0, DMA0)
                                If (LNotEqual (DMA0, 0x00))
                                {
                                    Subtract (DMA0, 0x02, DMA0)
                                }

                                Or (DMA0, 0x20, DMA0)
                            }

                            Return (ATA0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF             
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            Store (TPI1, PIO1)
                            Or (PIO1, 0x08, PIO1)
                            If (And (UDM3, 0x01))
                            {
                                Store (TDM1, DMA1)
                                Or (DMA1, 0x40, DMA1)
                            }
                            Else
                            {
                                Store (TPI1, DMA1)
                                If (LNotEqual (DMA1, 0x00))
                                {
                                    Subtract (DMA1, 0x02, DMA1)
                                }

                                Or (DMA1, 0x20, DMA1)
                            }

                            Return (ATA1)
                        }
                    }
                }
            }

            Device (DMI0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (BR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22)
                    }

                    Return (PG22)
                }

                Device (D080)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG23)
                    }

                    Return (PG23)
                }

                Device (D075)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }

                Device (D081)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24)
                    }

                    Return (PG24)
                }

                Device (D07F)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG25)
                    }

                    Return (PG25)
                }

                Device (D072)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG26)
                    }

                    Return (PG26)
                }

                Device (D073)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG27)
                    }

                    Return (PG27)
                }

                Device (D074)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG28)
                    }

                    Return (PG28)
                }

                Device (D07C)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG29)
                    }

                    Return (PG29)
                }

                Device (D076)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG2A)
                    }

                    Return (PG2A)
                }

                Device (D077)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG2B)
                    }

                    Return (PG2B)
                }

                Device (D078)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (CB0A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB0B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB0C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB0D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB0E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB0F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB0G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB0H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }

            Device (GLAN)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (LEqual (Or (Arg0, Arg1), 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (And (LEqual (Arg0, 0x00), LEqual (Arg1, 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return (Multiply (0x1E, Subtract (0x09, Add (Arg2, Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        If (LEqual (Arg1, 0x01))
                        {
                            If (LEqual (Arg4, 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If (LEqual (Arg2, 0x01))
                        {
                            Return (Multiply (0x0F, Subtract (0x04, Arg4)))
                        }

                        Return (Multiply (0x1E, Subtract (0x04, Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Store (0x00, Local0)
                    Or (Arg1, Local0, Local0)
                    Or (ShiftLeft (Arg0, 0x01), Local0, Local0)
                    Or (ShiftLeft (Arg2, 0x03), Local0, Local0)
                    Or (ShiftLeft (Arg3, 0x02), Local0, Local0)
                    Or (ShiftLeft (Arg4, 0x04), Local0, Local0)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                   
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (LOr (LEqual (Arg0, 0x00), LEqual (Arg0, 0xFFFFFFFF)))
                    {
                        Return (PBUF)
                    }

                    If (LGreater (Arg0, 0xF0))
                    {
                        Store (0x01, DMAE)
                        Store (0x00, PIOT)
                    }
                    Else
                    {
                        Store (0x01, FAST)
                        If (And (Arg1, 0x02))
                        {
                            If (And (LEqual (Arg0, 0x78), And (Arg2, 0x02)))
                            {
                                Store (0x03, RCT)
                                Store (0x02, ISP)
                                Store (0x04, PIOT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0xB4), And (Arg2, 0x01)))
                            {
                                Store (0x01, RCT)
                                Store (0x02, ISP)
                                Store (0x03, PIOT)
                            }
                            Else
                            {
                                Store (0x00, RCT)
                                Store (0x01, ISP)
                                Store (0x02, PIOT)
                            }
                        }
                    }

                    Return (PBUF)
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (LOr (LEqual (Arg0, 0x00), LEqual (Arg0, 0xFFFFFFFF)))
                    {
                        Return (PBUF)
                    }

                    If (LLessEqual (Arg0, 0x78))
                    {
                        If (And (Arg1, 0x04))
                        {
                            Store (0x01, UDME)
                            If (And (LEqual (Arg0, 0x0F), And (Arg2, 0x40)))
                            {
                                Store (0x01, UDMT)
                                Store (0x01, PCB)
                                Store (0x02, PCT)
                                Store (0x06, DMAT)
                            }
                            ElseIf (And (LEqual (Arg0, 0x14), And (Arg2, 0x20)))
                            {
                                Store (0x01, UDMT)
                                Store (0x01, PCB)
                                Store (0x01, PCT)
                                Store (0x05, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x1E), And (Arg2, 0x10)))
                            {
                                Store (0x01, PCB)
                                Store (0x02, PCT)
                                Store (0x04, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x2D), And (Arg2, 0x08)))
                            {
                                Store (0x01, PCB)
                                Store (0x01, PCT)
                                Store (0x03, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x3C), And (Arg2, 0x04)))
                            {
                                Store (0x02, PCT)
                                Store (0x02, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x5A), And (Arg2, 0x02)))
                            {
                                Store (0x01, PCT)
                                Store (0x01, DMAT)
                            }
                            ElseIf (And (LLessEqual (Arg0, 0x78), And (Arg2, 0x01)))
                            {
                                Store (0x00, DMAT)
                            }
                        }
                    }

                    Return (PBUF)
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        Store (GPIO (PFT0, PDE0, PRT0, PIP0), PIO0)
                        If (And (PSIT, 0x01))
                        {
                            Store (GPIO (PFT1, PDE1, PRT1, PIP1), PIO1)
                        }
                        Else
                        {
                            Store (GPIO (PFT1, PDE1, PRT0, PIP0), PIO1)
                        }

                        If (LEqual (PIO0, 0xFFFFFFFF))
                        {
                            Store (PIO0, DMA0)
                        }
                        Else
                        {
                            Store (GDMA (UDM0, PUM0, PCB0, And (PCCR, 0x01), PCT0), DMA0)
                            If (LGreater (DMA0, PIO0))
                            {
                                Store (PIO0, DMA0)
                            }
                        }

                        If (LEqual (PIO1, 0xFFFFFFFF))
                        {
                            Store (PIO1, DMA1)
                        }
                        Else
                        {
                            Store (GDMA (UDM1, PUM1, PCB1, And (PCCR, 0x02), PCT1), DMA1)
                            If (LGreater (DMA1, PIO1))
                            {
                                Store (PIO1, DMA1)
                            }
                        }

                        Store (SFLG (PIE0, UDM0, PIE1, UDM1, 0x01), FLAG)
                        Return (PBUF)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If (And (FLAG, 0x10))
                        {
                            Store (0x01, PSIT)
                        }

                        Store (SPIO (PIO0, RPS0, IOM0), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (RCT, PRT0)
                            Store (ISP, PIP0)
                            Store (FAST, PFT0)
                            Store (DMAE, PDE0)
                            Store (TPIO, TPI0)
                        }

                        Store (SPIO (PIO1, RPS1, IOM1), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (FAST, PFT1)
                            Store (DMAE, PDE1)
                            Store (TPIO, TPI1)
                            If (And (PSIT, 0x01))
                            {
                                Store (RCT, PRT1)
                                Store (ISP, PIP1)
                            }
                            Else
                            {
                                Store (RCT, PRT0)
                                Store (ISP, PIP0)
                            }
                        }

                        If (And (FLAG, 0x01))
                        {
                            Store (SDMA (DMA0, RPS0, DMM0), DMAT)
                            Store (PCT, PCT0)
                            Store (PCB, PCB0)
                            Store (UDME, UDM0)
                            Store (UDMT, PUM0)
                            Store (TDMA, TDM0)
                        }
                        Else
                        {
                            Store (0x00, UDM0)
                        }

                        If (And (FLAG, 0x04))
                        {
                            Store (SDMA (DMA1, RPS1, DMM1), DMAT)
                            Store (PCT, PCT1)
                            Store (PCB, PCB1)
                            Store (UDME, UDM1)
                            Store (UDMT, PUM1)
                            Store (TDMA, TDM1)
                        }
                        Else
                        {
                            Store (0x00, UDM1)
                        }

                        If (And (FLAG, 0x02))
                        {
                            Store (0x01, PIE0)
                        }

                        If (And (FLAG, 0x08))
                        {
                            Store (0x01, PIE1)
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF             
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            Store (TPI0, PIO0)
                            Or (PIO0, 0x08, PIO0)
                            If (And (UDM0, 0x01))
                            {
                                Store (TDM0, DMA0)
                                Or (DMA0, 0x40, DMA0)
                            }
                            Else
                            {
                                Store (TPI0, DMA0)
                                If (LNotEqual (DMA0, 0x00))
                                {
                                    Subtract (DMA0, 0x02, DMA0)
                                }

                                Or (DMA0, 0x20, DMA0)
                            }

                            Return (ATA0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF             
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            Store (TPI1, PIO1)
                            Or (PIO1, 0x08, PIO1)
                            If (And (UDM1, 0x01))
                            {
                                Store (TDM1, DMA1)
                                Or (DMA1, 0x40, DMA1)
                            }
                            Else
                            {
                                Store (TPI1, DMA1)
                                If (LNotEqual (DMA1, 0x00))
                                {
                                    Subtract (DMA1, 0x02, DMA1)
                                }

                                Or (DMA1, 0x20, DMA1)
                            }

                            Return (ATA1)
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                         
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        Store (GPIO (SFT0, SDE0, SRT0, SIP0), PIO0)
                        If (And (SSIT, 0x01))
                        {
                            Store (GPIO (SFT1, SDE1, SRT1, SIP1), PIO1)
                        }
                        Else
                        {
                            Store (GPIO (SFT1, SDE1, SRT0, SIP0), PIO1)
                        }

                        If (LEqual (PIO0, 0xFFFFFFFF))
                        {
                            Store (PIO0, DMA0)
                        }
                        Else
                        {
                            Store (GDMA (UDM2, SUM0, SCB0, And (SCCR, 0x01), SCT0), DMA0)
                            If (LGreater (DMA0, PIO0))
                            {
                                Store (PIO0, DMA0)
                            }
                        }

                        If (LEqual (PIO1, 0xFFFFFFFF))
                        {
                            Store (PIO1, DMA1)
                        }
                        Else
                        {
                            Store (GDMA (UDM3, SUM1, SCB1, And (SCCR, 0x02), SCT1), DMA1)
                            If (LGreater (DMA1, PIO1))
                            {
                                Store (PIO1, DMA1)
                            }
                        }

                        Store (SFLG (SIE0, UDM2, SIE1, UDM3, 0x01), FLAG)
                        Return (PBUF)
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        Store (Arg0, STMI)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                         
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If (And (FLAG, 0x10))
                        {
                            Store (0x01, SSIT)
                        }

                        Store (SPIO (PIO0, RPS0, IOM0), IOTM)
                        If (Or (DMAE, FAST))
                        {
                            Store (RCT, SRT0)
                            Store (ISP, SIP0)
                            Store (FAST, SFT0)
                            Store (DMAE, SDE0)
                            Store (TPIO, TPI0)
                        }

                        Store (SPIO (PIO1, RPS1, IOM1), IOTM)
                        Store (IOTM, POT2)
                        If (Or (DMAE, FAST))
                        {
                            Store (FAST, SFT1)
                            Store (DMAE, SDE1)
                            Store (TPIO, TPI1)
                            If (And (SSIT, 0x01))
                            {
                                Store (RCT, SRT1)
                                Store (ISP, SIP1)
                            }
                            Else
                            {
                                Store (RCT, SRT0)
                                Store (ISP, SIP0)
                            }
                        }

                        If (And (FLAG, 0x01))
                        {
                            Store (SDMA (DMA0, RPS0, DMM0), DMAT)
                            Store (PCT, SCT0)
                            Store (PCB, SCB0)
                            Store (UDME, UDM2)
                            Store (UDMT, SUM0)
                            Store (TDMA, TDM0)
                        }
                        Else
                        {
                            Store (0x00, UDM2)
                        }

                        If (And (FLAG, 0x04))
                        {
                            Store (SDMA (DMA1, RPS1, DMM1), DMAT)
                            Store (PCT, SCT1)
                            Store (PCB, SCB1)
                            Store (UDME, UDM3)
                            Store (UDMT, SUM1)
                            Store (TDMA, TDM1)
                        }
                        Else
                        {
                            Store (0x00, UDM3)
                        }

                        If (And (FLAG, 0x02))
                        {
                            Store (0x01, SIE0)
                        }

                        If (And (FLAG, 0x08))
                        {
                            Store (0x01, SIE1)
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF             
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            Store (TPI0, PIO0)
                            Or (PIO0, 0x08, PIO0)
                            If (And (UDM2, 0x01))
                            {
                                Store (TDM0, DMA0)
                                Or (DMA0, 0x40, DMA0)
                            }
                            Else
                            {
                                Store (TPI0, DMA0)
                                If (LNotEqual (DMA0, 0x00))
                                {
                                    Subtract (DMA0, 0x02, DMA0)
                                }

                                Or (DMA0, 0x20, DMA0)
                            }

                            Return (ATA0)
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF             
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            Store (TPI1, PIO1)
                            Or (PIO1, 0x08, PIO1)
                            If (And (UDM3, 0x01))
                            {
                                Store (TDM1, DMA1)
                                Or (DMA1, 0x40, DMA1)
                            }
                            Else
                            {
                                Store (TPI1, DMA1)
                                If (LNotEqual (DMA1, 0x00))
                                {
                                    Subtract (DMA1, 0x02, DMA1)
                                }

                                Or (DMA1, 0x20, DMA1)
                            }

                            Return (ATA1)
                        }
                    }
                }
            }
        }

        Device (PCI1)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BN80, 0, NotSerialized)
            {
                Return (0x80)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN80 ())
            }

            Name (_UID, 0x80)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR80)
                }

                Return (PR80)
            }

            Method (XOSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Store (_BBN (), Local0)
                If (LEqual (Local0, 0x00))
                {
                    If (LEqual (Arg0, ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ShiftRight (IIOH, 0x01, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^QRP0.OSHP ()
                                ^QR1A.OSHP ()
                                ^QR1B.OSHP ()
                                ^QR2A.OSHP ()
                                ^QR2B.OSHP ()
                                ^QR2C.OSHP ()
                                ^QR2D.OSHP ()
                                ^QR3A.OSHP ()
                                ^QR3B.OSHP ()
                                ^QR3C.OSHP ()
                                ^QR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x02, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x03, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            Store (0x01, GPSH)
                        }

                        If (LNotEqual (Arg1, One))
                        {
                            Or (CDW1, 0x08, CDW1)
                        }

                        If (LNotEqual (CDW3, CTRL))
                        {
                            Or (CDW1, 0x10, CDW1)
                        }

                        Store (CTRL, CDW3)
                        Return (Arg3)
                    }
                    Else
                    {
                        Or (CDW1, 0x04, CDW1)
                        Store (0xEE, IO80)
                        Return (Arg3)
                    }
                }
                Return (Zero)
            }

            Method (BN40, 0, NotSerialized)
            {
                Return (BBI1)
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If (LEqual (CLOD, 0x00))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x02)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO1PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                           
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x31, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                         
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x31, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                         
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x31, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                           
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ShiftRight (IIOH, 0x01, Local1)
                And (Local1, 0x01, Local1)
                If (LEqual (Local1, 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P1RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000001,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4158,             // Range Minimum
                    0x4159,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x5758,             // Range Minimum
                    0x5759,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x5858,             // Range Minimum
                    0x5859,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000001,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P1RS)
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM2,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM3,   7
                }
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB1A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB1B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB1C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB1D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB1E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB1F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB1G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB1H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI2)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BNC0, 0, NotSerialized)
            {
                Return (0xC0)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BNC0 ())
            }

            Name (_UID, 0xC0)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (ARC0)
                }

                Return (PRC0)
            }

            Method (XOSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Store (_BBN (), Local0)
                If (LEqual (Local0, 0x00))
                {
                    If (LEqual (Arg0, ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ShiftRight (IIOH, 0x01, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x02, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^RRP0.OSHP ()
                                ^RR1A.OSHP ()
                                ^RR1B.OSHP ()
                                ^RR2A.OSHP ()
                                ^RR2B.OSHP ()
                                ^RR2C.OSHP ()
                                ^RR2D.OSHP ()
                                ^RR3A.OSHP ()
                                ^RR3B.OSHP ()
                                ^RR3C.OSHP ()
                                ^RR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x03, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            Store (0x01, GPSH)
                        }

                        If (LNotEqual (Arg1, One))
                        {
                            Or (CDW1, 0x08, CDW1)
                        }

                        If (LNotEqual (CDW3, CTRL))
                        {
                            Or (CDW1, 0x10, CDW1)
                        }

                        Store (CTRL, CDW3)
                        Return (Arg3)
                    }
                    Else
                    {
                        Or (CDW1, 0x04, CDW1)
                        Store (0xEE, IO80)
                        Return (Arg3)
                    }
                }
                Return (Zero)
            }

            Method (BN80, 0, NotSerialized)
            {
                Return (BBI2)
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If (LEqual (CLOD, 0x00))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x04)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO2PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                           
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x32, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                         
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x32, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                         
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x32, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                           
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ShiftRight (IIOH, 0x02, Local1)
                And (Local1, 0x01, Local1)
                If (LEqual (Local1, 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P2RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000001,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4558,             // Range Minimum
                    0x4559,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4259,             // Range Minimum
                    0x425A,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4359,             // Range Minimum
                    0x435A,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000001,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P2RS)
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM4,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM5,   7
                }
            }

            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Device (RRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB2A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB2B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB2C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB2D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB2E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB2F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB2G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB2H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI3)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BNE0, 0, NotSerialized)
            {
                Return (0xE0)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BNE0 ())
            }

            Name (_UID, 0xE0)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (ARE0)
                }

                Return (PRE0)
            }

            Method (XOSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If (LGreater (Arg2, 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Store (_BBN (), Local0)
                If (LEqual (Local0, 0x00))
                {
                    If (LEqual (Arg0, ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If (LEqual (Arg0, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (LOr (AHPE, LNotEqual (And (SUPP, 0x16), 0x16)))
                    {
                        And (CTRL, 0x1E, CTRL)
                        Sleep (0x03E8)
                    }

                    And (CTRL, 0x1D, CTRL)
                    If (LNot (PEPM))
                    {
                        And (CTRL, 0x1B, CTRL)
                    }

                    If (LNot (PEER))
                    {
                        And (CTRL, 0x15, CTRL)
                    }

                    If (LNot (PECS))
                    {
                        And (CTRL, 0x0F, CTRL)
                    }

                    If (Not (And (CDW1, 0x01)))
                    {
                        If (And (CTRL, 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ShiftRight (IIOH, 0x01, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x02, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            ShiftRight (IIOH, 0x03, Local1)
                            And (Local1, 0x01, Local1)
                            If (LEqual (Local1, 0x01))
                            {
                                ^SRP0.OSHP ()
                                ^SR1A.OSHP ()
                                ^SR1B.OSHP ()
                                ^SR2A.OSHP ()
                                ^SR2B.OSHP ()
                                ^SR2C.OSHP ()
                                ^SR2D.OSHP ()
                                ^SR3A.OSHP ()
                                ^SR3B.OSHP ()
                                ^SR3C.OSHP ()
                                ^SR3D.OSHP ()
                            }

                            Store (0x01, GPSH)
                        }

                        If (LNotEqual (Arg1, One))
                        {
                            Or (CDW1, 0x08, CDW1)
                        }

                        If (LNotEqual (CDW3, CTRL))
                        {
                            Or (CDW1, 0x10, CDW1)
                        }

                        Store (CTRL, CDW3)
                        Return (Arg3)
                    }
                    Else
                    {
                        Or (CDW1, 0x04, CDW1)
                        Store (0xEE, IO80)
                        Return (Arg3)
                    }
                }
                Return (Zero)
            }

            Method (BNC0, 0, NotSerialized)
            {
                Return (BBI3)
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If (LEqual (CLOD, 0x00))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x06)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO3PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                           
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x33, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                         
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x33, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                         
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x33, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                           
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ShiftRight (IIOH, 0x03, Local1)
                And (Local1, 0x01, Local1)
                If (LEqual (Local1, 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P3RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000001,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4958,             // Range Minimum
                    0x4959,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4559,             // Range Minimum
                    0x455A,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4659,             // Range Minimum
                    0x465A,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0002,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000001,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P3RS)
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM6,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM7,   7
                }
            }

            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Device (SRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE0019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0xE001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (0x01, HGPE)
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return (And (SCTL, 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x0C), 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (ShiftRight (And (SCTL, 0x10), 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x01, SSTS)
                    }

                    Return (And (SSTS, 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x02, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x02), 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x04, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x04), 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x08, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x08), 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x10, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x10), 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x20, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x20), 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (SSTS, 0x40, SSTS)
                    }

                    Return (ShiftRight (And (SSTS, 0x40), 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Store ("SSTS", SSTS)
                    Store (0x00, HGPE)
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    Store (0x00, Local1)
                    If (LNotEqual (Arg0, Local0))
                    {
                        Store (Arg0, SCTL)
                        While (LAnd (LNot (CMCS (0x00)), LNotEqual (0x64, Local1)))
                        {
                            Sleep (0x02)
                            Add (Local1, 0x02, Local1)
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, ALMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, ALON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, ALBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, ALOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    And (Local0, PLMK, Local0)
                    If (LEqual (Arg0, 0x01))
                    {
                        Or (Local0, PLON, Local0)
                    }

                    If (LEqual (Arg0, 0x02))
                    {
                        Or (Local0, PLBL, Local0)
                    }

                    If (LEqual (Arg0, 0x03))
                    {
                        Or (Local0, PLOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Store (SCTL, Local0)
                    If (Arg0)
                    {
                        And (Local0, SPON, Local0)
                    }
                    Else
                    {
                        Or (Local0, SPOF, Local0)
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch (And (Arg0, 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (LNot (PWCC ()))
                                    {
                                        PWCM (0x01)
                                        Store (0x01, ABIE)
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    Store (0xFF, IO80)
                    Store (SCTL, Local0)
                    If (LNotEqual (ATID (), 0x01))
                    {
                        And (Local0, ALMK, Local0)
                        Or (Local0, ALBL, Local0)
                    }

                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, SPOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, PLOF, Local0)
                    HPCC (Local0)
                    Store (SCTL, Local0)
                    Or (Local0, ALOF, Local0)
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If (And (HPEV, SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (LNot (HPCP))
                    {
                        Return (0xFF)
                    }

                    Sleep (0x64)
                    Store (0x00, CCIE)
                    If (And (HPEV, SSTS))
                    {
                        Store (0xFD, IO80)
                        Sleep (0x0A)
                        Store (PPXH (0x00), Local0)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    Store (0xFC, IO80)
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (LNot (PRDS (0x00)))
                        {
                            Store (0x01, LDIS)
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        Store (0x00, ABIE)
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    Store (0x01, ABIE)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    Store (0x00, LDIS)
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (LNot (PFDS (0x00)))
                                    {
                                        PWCM (0x01)
                                        Store (0x00, Local1)
                                        Store (0x01, ABIE)
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        Store (0x01, LDIS)
                                        Store (0x03, Local1)
                                        Store (0x01, ABIE)
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Store (0x0258, Local0)
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (LNot (ABPS (0x00)))
                            {
                                Sleep (0xC8)
                                Add (Local0, 0xC8, Local0)
                                If (LEqual (0x1388, Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    Store (0x01, ABIE)
                                    Store (0x01, LDIS)
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        Store (0x01, LDIS)
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (LNot (PRDS (0x00)))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If (LEqual (MSSC (0x00), MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            Store (0x01, LDIS)
                            Return (0xFF)
                        }
                        Else
                        {
                            Store (0x00, LDIS)
                            ABPS (0x01)
                            Sleep (0xC8)
                            Store (0x01, ABIE)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Store (PSNM, Local0)
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Store (0xC8, Local0)
                        While (Local0)
                        {
                            Store (0x01, PMEX)
                            If (PMEX)
                            {
                                Decrement (Local0)
                            }
                            Else
                            {
                                Store (0x00, Local0)
                            }
                        }

                        Store (0x01, PMCS)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB3A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB3B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB3C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB3D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB3E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB3F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB3G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB3H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.IP2P, 0x02)
            Notify (\_SB.PWRB, 0x02)
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.XHCI, 0x02)
            Notify (\_SB.PCI0.EHC1, 0x02)
            Notify (\_SB.PCI0.EHC2, 0x02)
            Notify (\_SB.PCI0.GLAN, 0x02)
            Notify (\_SB.PWRB, 0x02)
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C"))  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.PCI0.LPC0.SIO1.SIOS (Arg0)
            \_SB.PCI0.LPC0.SPTS (Arg0)
            IPTS (Arg0)
            TBPS (Arg0)
            \_SB.TPM.TPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        TBWK (Arg0)
        IWAK (Arg0)
        \_SB.PCI0.LPC0.SWAK (Arg0)
        \_SB.PCI0.LPC0.SIO1.SIOW (Arg0)
        Return (WAKP)
    }

    Scope (_SB.PCI0)
    {
        Name (SLIC, Buffer (0x9E)
        {
            "791369584825Genuine NVIDIA Certified SLI Ready Motherboard for ASUS AFRICA         3eb9-Copyright 2014 NVIDIA Corporation All Rights Reserved-394180768352(R)"
        })
        Device (WMI1)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,
                /* 0010 */  0x4D, 0x58, 0x01, 0x02                         
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, 0x00, FUNC)
                If (LEqual (FUNC, 0x41494C53))
                {
                    Return (SLIC)
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMB, 0xBC17C018)
        OperationRegion (\RAMW, SystemMemory, RAMB, 0x00010000)
        Field (RAMW, ByteAcc, NoLock, Preserve)
        {
            PAR0,   32, 
            PAR1,   32, 
            PAR2,   32, 
            PINX,   32, 
            PADD,   2048, 
            DSAF,   32
        }

        Mutex (MPAR, 0x00)
        Name (ARBF, Buffer (0x10){})
        CreateDWordField (ARBF, 0x00, REAX)
        CreateDWordField (ARBF, 0x04, REBX)
        CreateDWordField (ARBF, 0x08, RECX)
        CreateDWordField (ARBF, 0x0C, REDX)
        OperationRegion (DEB0, SystemIO, 0x80, 0x01)
        Field (DEB0, ByteAcc, NoLock, Preserve)
        {
            DBG8,   8
        }

        Method (ISMI, 1, Serialized)
        {
            Store (Arg0, SMIC)
        }

        Method (GMSR, 1, Serialized)
        {
            If (LEqual (Acquire (MPAR, 0xFFFF), 0x00))
            {
                Store (0x80000000, PINX)
                Store (Arg0, PAR0)
                ISMI (0x90)
                Store (Arg0, RECX)
                Store (PAR1, REAX)
                Store (PAR2, REDX)
                Release (MPAR)
                Return (ARBF)
            }

            Return (Ones)
        }

        Method (SMSR, 1, Serialized)
        {
            If (LEqual (Acquire (MPAR, 0xFFFF), 0x00))
            {
                CreateDWordField (Arg0, 0x00, AEAX)
                CreateDWordField (Arg0, 0x04, AEBX)
                CreateDWordField (Arg0, 0x08, AECX)
                CreateDWordField (Arg0, 0x0C, AEDX)
                Store (0x80000001, PINX)
                Store (AECX, PAR0)
                Store (AEAX, PAR1)
                Store (AEDX, PAR2)
                ISMI (0x90)
                Release (MPAR)
            }

            Return (Ones)
        }

        Method (PRID, 1, Serialized)
        {
            If (LEqual (Acquire (MPAR, 0xFFFF), 0x00))
            {
                Store (0x80000002, PINX)
                Store (Arg0, PAR0)
                ISMI (0x90)
                Store (PAR1, REAX)
                Store (PAR2, REDX)
                Release (MPAR)
                Return (ARBF)
            }

            Return (Ones)
        }

        Method (GPRE, 1, Serialized)
        {
            Store (Arg0, PAR0)
            Store (0x80000005, PINX)
            ISMI (0x90)
            Return (PAR0)
        }

        Method (GNVS, 1, Serialized)
        {
            Store (Arg0, PAR0)
            Store (0x80000003, PINX)
            ISMI (0x90)
            Return (PAR1)
        }

        Method (SNVS, 2, Serialized)
        {
            Store (Arg0, PAR0)
            Store (Arg1, PAR1)
            Store (0x80000004, PINX)
            ISMI (0x90)
        }

        Method (SIRS, 0, Serialized)
        {
            Store (0x8000000A, PINX)
            ISMI (0x90)
        }

        Method (SRAD, 0, Serialized)
        {
            Store (0x8000000B, PINX)
            ISMI (0x90)
        }

        Method (SARM, 1, Serialized)
        {
            If (LAnd (LGreater (Arg0, 0x03), LLess (Arg0, 0x06)))
            {
                ISMI (0x92)
            }
        }

        Method (GAMM, 0, Serialized)
        {
            ISMI (0x91)
        }

        Method (SAMM, 0, Serialized)
        {
            ISMI (0x92)
        }
    }

    Scope (\)
    {
        Device (AMW0)
        {
            Name (_HID, EisaId ("PNP0C14"))  // _HID: Hardware ID
            Name (_UID, "ASUSWMI")  // _UID: Unique ID
            Name (_WDG, Buffer (0x50)
            {
                /* 0000 */  0xD0, 0x5E, 0x84, 0x97, 0x6D, 0x4E, 0xDE, 0x11,
                /* 0008 */  0x8A, 0x39, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,
                /* 0010 */  0x42, 0x43, 0x01, 0x02, 0xA0, 0x47, 0x67, 0x46,
                /* 0018 */  0xEC, 0x70, 0xDE, 0x11, 0x8A, 0x39, 0x08, 0x00,
                /* 0020 */  0x20, 0x0C, 0x9A, 0x66, 0x42, 0x44, 0x01, 0x02,
                /* 0028 */  0x72, 0x0F, 0xBC, 0xAB, 0xA1, 0x8E, 0xD1, 0x11,
                /* 0030 */  0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10, 0x00, 0x00,
                /* 0038 */  0xD2, 0x00, 0x01, 0x08, 0x21, 0x12, 0x90, 0x05,
                /* 0040 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,
                /* 0048 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00 
            })
            Name (CCAC, 0x00)
            Name (ECD2, 0x00)
            Name (EID2, 0x00)
            Method (WED2, 1, NotSerialized)
            {
                Store (Arg0, ECD2)
            }

            Method (WMBC, 3, Serialized)
            {
                Store (0x01, Local0)
                Switch (ToInteger (Arg1))
                {
                    Case (0x43455053)
                    {
                        Return (SPEC (Arg2))
                    }
                    Case (0x50564544)
                    {
                        Return (DEVP (Arg2))
                    }
                    Case (0x50534453)
                    {
                        Return (SDSP (Arg2))
                    }
                    Case (0x50534447)
                    {
                        Return (GDSP (Arg2))
                    }
                    Case (0x53564544)
                    {
                        Return (DEVS (Arg2))
                    }
                    Case (0x53544344)
                    {
                        Return (DSTS (Arg2))
                    }
                    Case (0x44495047)
                    {
                        Return (GPID ())
                    }
                    Case (0x5446424B)
                    {
                        Return (KBFT (Arg2))
                    }
                    Case (0x59454B48)
                    {
                        Return (HKEY ())
                    }
                    Default
                    {
                        Return (0x00)
                    }

                }

                Return (Local0)
            }

            Method (RSMB, 1, Serialized)
            {
                Return (0x00)
            }

            Method (WSMB, 1, Serialized)
            {
                Return (0x00)
            }

            Method (RSMW, 1, Serialized)
            {
                Return (0x00)
            }

            Method (WSMW, 1, Serialized)
            {
                Return (0x00)
            }

            Method (RSMK, 1, Serialized)
            {
                Return (0x00)
            }

            Method (WSMK, 1, Serialized)
            {
                Return (0x00)
            }

            Method (WMBD, 3, Serialized)
            {
                Store (0x01, Local0)
                Switch (ToInteger (Arg1))
                {
                    Case (0x424D5352)
                    {
                        Return (RSMB (Arg2))
                    }
                    Case (0x424D5357)
                    {
                        Return (WSMB (Arg2))
                    }
                    Case (0x574D5352)
                    {
                        Return (RSMW (Arg2))
                    }
                    Case (0x574D5357)
                    {
                        Return (WSMW (Arg2))
                    }
                    Case (0x4B4D5352)
                    {
                        Return (RSMK (Arg2))
                    }
                    Case (0x4B4D5357)
                    {
                        Return (WSMK (Arg2))
                    }
                    Default
                    {
                        Return (0x00)
                    }

                }

                Return (Local0)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                If (LEqual (Arg0, 0xD2))
                {
                    Return (EID2)
                }

                Return (0x00)
            }

            Method (AMWR, 1, Serialized)
            {
                Store (0x00, Local1)
                If (ECD2)
                {
                    Store (Arg0, EID2)
                    Notify (AMW0, 0xD2)
                    Store (0x01, Local1)
                }
                Else
                {
                }

                Return (Local1)
            }

            Method (AMWN, 1, Serialized)
            {
                Store (AMWR (Arg0), Local0)
                Return (Local0)
            }

            Name (WQMO, Buffer (0x09A6)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
                /* 0008 */  0x96, 0x09, 0x00, 0x00, 0x42, 0x38, 0x00, 0x00,
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
                /* 0018 */  0xA8, 0xD1, 0x9A, 0x00, 0x01, 0x06, 0x18, 0x42,
                /* 0020 */  0x10, 0x07, 0x10, 0x4A, 0x29, 0x86, 0x42, 0x04,
                /* 0028 */  0x0A, 0x0D, 0xA1, 0x38, 0x0A, 0x60, 0x30, 0x12,
                /* 0030 */  0x20, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,
                /* 0070 */  0x3C, 0x8A, 0xC8, 0x46, 0xE3, 0x04, 0x65, 0x43,
                /* 0078 */  0xA3, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0xC0,
                /* 0080 */  0x84, 0xC0, 0xEE, 0x05, 0x98, 0x13, 0xE0, 0x4D,
                /* 0088 */  0x80, 0xB8, 0x61, 0x68, 0x85, 0x07, 0x10, 0xAA,
                /* 0090 */  0x30, 0x01, 0xB6, 0x60, 0x84, 0x52, 0x1B, 0x8C,
                /* 0098 */  0x50, 0x1A, 0x43, 0xD0, 0x30, 0x8C, 0x12, 0xF1,
                /* 00A0 */  0x90, 0x3A, 0x83, 0x15, 0x4A, 0xC4, 0x30, 0x21,
                /* 00A8 */  0x22, 0x54, 0x86, 0x41, 0x86, 0x15, 0x2A, 0x5A,
                /* 00B0 */  0xDC, 0x08, 0xED, 0x0F, 0x82, 0x44, 0x5B, 0xB1,
                /* 00B8 */  0x86, 0xEA, 0x48, 0xA3, 0x41, 0x0D, 0x2F, 0xC1,
                /* 00C0 */  0xE1, 0x7A, 0xA8, 0xE7, 0xD8, 0xB9, 0x00, 0xE9,
                /* 00C8 */  0xC0, 0x02, 0x09, 0x7E, 0x16, 0x75, 0x8E, 0x93,
                /* 00D0 */  0x80, 0x24, 0x30, 0xD6, 0xF1, 0xB3, 0x81, 0xE3,
                /* 00D8 */  0x5D, 0x03, 0x6A, 0xC6, 0xC7, 0xCB, 0x04, 0xC1,
                /* 00E0 */  0xA1, 0x86, 0xE8, 0x81, 0x86, 0x3B, 0x81, 0x43,
                /* 00E8 */  0x64, 0x80, 0x9E, 0xD3, 0xD1, 0x60, 0x0E, 0x00,
                /* 00F0 */  0x76, 0x38, 0x19, 0xDD, 0x03, 0x4A, 0x15, 0x60,
                /* 00F8 */  0x76, 0xCC, 0xB2, 0x08, 0xA4, 0xF1, 0x18, 0xFA,
                /* 0100 */  0x74, 0xCF, 0xE7, 0x84, 0x13, 0x58, 0xFE, 0x20,
                /* 0108 */  0x50, 0x23, 0x33, 0xB4, 0x0D, 0x4E, 0x4B, 0x98,
                /* 0110 */  0x21, 0x0F, 0xFF, 0xB0, 0x98, 0x58, 0x08, 0x7D,
                /* 0118 */  0x10, 0x3C, 0x1E, 0x78, 0xFF, 0xFF, 0xF1, 0x80,
                /* 0120 */  0x47, 0xF1, 0x99, 0x40, 0x08, 0xAF, 0x04, 0xB1,
                /* 0128 */  0x3D, 0xA0, 0xE7, 0x04, 0x03, 0x63, 0x07, 0x64,
                /* 0130 */  0xBF, 0x02, 0x10, 0x82, 0x97, 0x39, 0x22, 0x39,
                /* 0138 */  0x45, 0xD0, 0x98, 0x8C, 0xD1, 0x2A, 0x84, 0x86,
                /* 0140 */  0x10, 0xDA, 0x10, 0x67, 0x17, 0xFF, 0xE0, 0x0D,
                /* 0148 */  0x73, 0xEE, 0x26, 0x28, 0x72, 0x04, 0xA8, 0xCF,
                /* 0150 */  0x84, 0x47, 0xC0, 0x8F, 0x01, 0xD1, 0x43, 0x9F,
                /* 0158 */  0x4D, 0xF4, 0xE3, 0x89, 0x72, 0x12, 0x07, 0xE4,
                /* 0160 */  0x33, 0x83, 0x11, 0x82, 0x97, 0x7B, 0x48, 0x20,
                /* 0168 */  0x9A, 0xE7, 0xA0, 0x13, 0xC3, 0x39, 0x1D, 0x02,
                /* 0170 */  0x53, 0xA3, 0x05, 0xA2, 0x09, 0x10, 0x45, 0x59,
                /* 0178 */  0xAA, 0x6C, 0x2C, 0xD5, 0x83, 0xA0, 0x82, 0x80,
                /* 0180 */  0x34, 0x77, 0x43, 0x9C, 0xB4, 0x91, 0x03, 0xC7,
                /* 0188 */  0xA8, 0x7E, 0xD8, 0x54, 0x04, 0x9C, 0x0E, 0x1B,
                /* 0190 */  0x1E, 0xB7, 0xE3, 0x93, 0x28, 0xFA, 0x80, 0x28,
                /* 0198 */  0x9C, 0xC3, 0x9E, 0x39, 0x28, 0x88, 0x01, 0x9D,
                /* 01A0 */  0x04, 0x42, 0x4E, 0x8E, 0x02, 0xA8, 0xBD, 0x68,
                /* 01A8 */  0x58, 0x1A, 0xD7, 0xA9, 0xBD, 0x09, 0x78, 0x5A,
                /* 01B0 */  0x8F, 0x05, 0x87, 0x71, 0x5C, 0x67, 0x6D, 0xD1,
                /* 01B8 */  0x37, 0x06, 0x3A, 0x1F, 0xDF, 0x05, 0xB8, 0x06,
                /* 01C0 */  0x08, 0xCD, 0xC8, 0xF0, 0x56, 0x03, 0x48, 0xC1,
                /* 01C8 */  0xF8, 0x49, 0xE0, 0x11, 0xC0, 0x04, 0xD6, 0x75,
                /* 01D0 */  0x20, 0x80, 0x7E, 0xD9, 0xF0, 0xF0, 0x7D, 0xC2,
                /* 01D8 */  0x78, 0xBC, 0x48, 0x50, 0xDF, 0x7D, 0x00, 0x14,
                /* 01E0 */  0x40, 0x3E, 0x00, 0x58, 0xE9, 0x1D, 0x80, 0x8E,
                /* 01E8 */  0x21, 0x44, 0x98, 0x68, 0x46, 0xE7, 0x12, 0x56,
                /* 01F0 */  0xAA, 0xFF, 0xFF, 0x68, 0xF9, 0x41, 0xC5, 0xA3,
                /* 01F8 */  0x35, 0x88, 0x47, 0xEB, 0x40, 0xA3, 0x45, 0x1F,
                /* 0200 */  0x33, 0xAC, 0x70, 0x54, 0xF2, 0x39, 0x01, 0x0D,
                /* 0208 */  0x17, 0x06, 0x41, 0xE1, 0x07, 0x0E, 0x68, 0x80,
                /* 0210 */  0xA7, 0xF7, 0x66, 0xE0, 0x99, 0x18, 0xCE, 0xF3,
                /* 0218 */  0xE5, 0x70, 0x9E, 0x2F, 0x1F, 0x8E, 0x0F, 0x14,
                /* 0220 */  0xF0, 0x07, 0x8C, 0x25, 0x28, 0x70, 0xC2, 0x20,
                /* 0228 */  0x87, 0xC7, 0x08, 0x1E, 0x2C, 0x95, 0x35, 0x2E,
                /* 0230 */  0xD4, 0xFD, 0xC0, 0x27, 0x1A, 0x86, 0x7D, 0xA8,
                /* 0238 */  0x47, 0xF3, 0x96, 0x70, 0x86, 0x6F, 0x13, 0x07,
                /* 0240 */  0xF5, 0xEE, 0x61, 0xA7, 0x42, 0x2D, 0x3A, 0x84,
                /* 0248 */  0xF5, 0x48, 0x39, 0xAC, 0xD1, 0xC2, 0x1E, 0xF0,
                /* 0250 */  0x73, 0x87, 0xEF, 0x19, 0xFC, 0x4A, 0xE3, 0x63,
                /* 0258 */  0x08, 0x5D, 0x85, 0x4E, 0x15, 0x5C, 0x14, 0x84,
                /* 0260 */  0xE2, 0xAD, 0x45, 0xC3, 0x3F, 0x0B, 0x8F, 0xEB,
                /* 0268 */  0x15, 0xC3, 0x57, 0x80, 0x87, 0x13, 0x9F, 0x01,
                /* 0270 */  0xE2, 0x07, 0x3A, 0x82, 0x17, 0x11, 0x9F, 0x7D,
                /* 0278 */  0x7C, 0x79, 0xF1, 0x21, 0x83, 0x9D, 0x2C, 0x78,
                /* 0280 */  0x08, 0x0A, 0xC5, 0x38, 0x1C, 0xA0, 0x84, 0xC3,
                /* 0288 */  0x08, 0xCE, 0x20, 0x1E, 0x9E, 0x83, 0x1C, 0x0E,
                /* 0290 */  0xD0, 0xE7, 0x20, 0x0F, 0x84, 0x0D, 0xC2, 0x20,
                /* 0298 */  0xE7, 0xF1, 0xF2, 0xC3, 0x2E, 0x16, 0xF8, 0xFF,
                /* 02A0 */  0xFF, 0xC5, 0x02, 0x78, 0xA5, 0x19, 0x14, 0x5A,
                /* 02A8 */  0xCF, 0xA0, 0x20, 0x60, 0x3C, 0x3F, 0x78, 0xBC,
                /* 02B0 */  0x9E, 0xAD, 0xA7, 0x05, 0xDE, 0x11, 0xFB, 0xFC,
                /* 02B8 */  0x01, 0x9C, 0xC3, 0x1F, 0x5E, 0x50, 0x71, 0x87,
                /* 02C0 */  0x44, 0x41, 0x7C, 0x36, 0x70, 0x94, 0xF1, 0xA2,
                /* 02C8 */  0x67, 0xE2, 0xC3, 0x90, 0x8F, 0x0B, 0x4F, 0x37,
                /* 02D0 */  0x98, 0xC3, 0x07, 0xB8, 0x47, 0xE2, 0xC3, 0x07,
                /* 02D8 */  0xF0, 0xF8, 0xFF, 0x1F, 0x3E, 0x80, 0x9F, 0x44,
                /* 02E0 */  0x8B, 0x5A, 0x85, 0x1E, 0x3E, 0xC0, 0x15, 0xE4,
                /* 02E8 */  0x84, 0x84, 0x96, 0x73, 0xF8, 0x40, 0x4E, 0x24,
                /* 02F0 */  0x4C, 0x74, 0x9F, 0x91, 0x5E, 0x3C, 0x2C, 0xE1,
                /* 02F8 */  0xE0, 0x81, 0x0A, 0x4F, 0xA2, 0xF8, 0xA7, 0x02,
                /* 0300 */  0x54, 0xE0, 0x53, 0x01, 0x05, 0x31, 0xA0, 0x0F,
                /* 0308 */  0x15, 0x70, 0x66, 0xF0, 0xEC, 0x85, 0x99, 0x07,
                /* 0310 */  0x8C, 0x33, 0x12, 0x60, 0xEB, 0x50, 0x01, 0xDE,
                /* 0318 */  0xFF, 0xFF, 0xA1, 0x02, 0x38, 0x1C, 0x90, 0x00,
                /* 0320 */  0x59, 0x12, 0x2F, 0x48, 0x0F, 0x15, 0xE0, 0x3A,
                /* 0328 */  0x70, 0xFA, 0x50, 0xC1, 0x0F, 0x9A, 0x16, 0x05,
                /* 0330 */  0xA4, 0x23, 0x9E, 0x0F, 0x15, 0x30, 0x2E, 0x42,
                /* 0338 */  0x86, 0x7F, 0xAD, 0x3B, 0x96, 0xE7, 0x30, 0x72,
                /* 0340 */  0xAE, 0x40, 0xC7, 0x3E, 0x18, 0xA0, 0x82, 0x8E,
                /* 0348 */  0x9E, 0x82, 0x18, 0xD0, 0x29, 0x0E, 0x06, 0x68,
                /* 0350 */  0x1D, 0xE7, 0x0A, 0xD4, 0x31, 0x0E, 0xF8, 0xFD,
                /* 0358 */  0xFF, 0xCF, 0x14, 0xC0, 0x49, 0xC4, 0xD1, 0x0A,
                /* 0360 */  0x35, 0x5C, 0x8F, 0xD5, 0x20, 0x1E, 0xAB, 0x8F,
                /* 0368 */  0xA1, 0x1E, 0x2B, 0xEE, 0x1B, 0xE0, 0x23, 0x00,
                /* 0370 */  0xFE, 0xE8, 0x84, 0x03, 0x7B, 0xAE, 0x00, 0x4C,
                /* 0378 */  0x7B, 0x3C, 0x57, 0x80, 0x4E, 0xDA, 0xD9, 0x07,
                /* 0380 */  0x1D, 0x70, 0xAD, 0x3A, 0x89, 0xE1, 0xCF, 0x71,
                /* 0388 */  0x8C, 0x60, 0xA8, 0xC3, 0x1B, 0x85, 0x70, 0x1C,
                /* 0390 */  0x0A, 0x85, 0x39, 0x19, 0xD0, 0xFF, 0xFF, 0x11,
                /* 0398 */  0x96, 0xC0, 0x51, 0x10, 0x0F, 0xCD, 0x61, 0xCE,
                /* 03A0 */  0x70, 0xA0, 0x39, 0x16, 0xC0, 0xBB, 0x55, 0xB0,
                /* 03A8 */  0x63, 0x01, 0x6C, 0x02, 0x1F, 0x0B, 0xC0, 0x17,
                /* 03B0 */  0x67, 0x58, 0xE8, 0xD1, 0xFA, 0xFE, 0x87, 0xBB,
                /* 03B8 */  0x3F, 0x44, 0x79, 0x29, 0xF6, 0x21, 0x07, 0xEE,
                /* 03C0 */  0xB8, 0xC0, 0x71, 0x7A, 0x00, 0x5C, 0x1D, 0xC4,
                /* 03C8 */  0xE4, 0xF4, 0xF4, 0x00, 0xAE, 0x24, 0xA7, 0x07,
                /* 03D0 */  0xD4, 0x80, 0xFD, 0xFF, 0xD7, 0x03, 0xA4, 0x73,
                /* 03D8 */  0x02, 0xF6, 0xA2, 0xCD, 0x20, 0x4E, 0xF4, 0x79,
                /* 03E0 */  0xC4, 0x0A, 0x8E, 0x38, 0xA8, 0xEC, 0x24, 0x4A,
                /* 03E8 */  0x7E, 0xC4, 0x41, 0x65, 0x1D, 0x3B, 0x05, 0x31,
                /* 03F0 */  0xA0, 0x4F, 0x94, 0x80, 0x8F, 0x3B, 0x0E, 0xB0,
                /* 03F8 */  0xD8, 0xA8, 0x27, 0xCB, 0x23, 0x4F, 0x96, 0x82,
                /* 0400 */  0x78, 0xB2, 0xBE, 0x54, 0x00, 0x87, 0x1B, 0x0E,
                /* 0408 */  0xB0, 0xFF, 0xFF, 0x5F, 0x2A, 0x80, 0x92, 0x43,
                /* 0410 */  0xA9, 0x97, 0x0A, 0x90, 0xC9, 0xBB, 0xE1, 0xA0,
                /* 0418 */  0x43, 0xAE, 0x55, 0xF7, 0x3A, 0x76, 0x6C, 0xF5,
                /* 0420 */  0xB8, 0x7D, 0x93, 0xC6, 0x04, 0xBB, 0xE1, 0xA0,
                /* 0428 */  0x22, 0x51, 0x28, 0xD0, 0xB9, 0x00, 0x15, 0x01,
                /* 0430 */  0x8E, 0x82, 0x78, 0x68, 0x3E, 0x17, 0x58, 0xC9,
                /* 0438 */  0xB9, 0x00, 0xED, 0xFD, 0x42, 0x41, 0x06, 0xE7,
                /* 0440 */  0x7B, 0x81, 0x61, 0x8A, 0x1F, 0x8A, 0xEE, 0x3D,
                /* 0448 */  0x3E, 0x17, 0x80, 0xFB, 0x8A, 0x03, 0x2E, 0x63,
                /* 0450 */  0x02, 0xB4, 0x41, 0x92, 0x7B, 0xB8, 0xC7, 0x85,
                /* 0458 */  0x1B, 0x87, 0x47, 0x75, 0x4C, 0x31, 0x9F, 0xE3,
                /* 0460 */  0x82, 0x3C, 0xC7, 0x79, 0x5E, 0xB8, 0xF3, 0x03,
                /* 0468 */  0x70, 0xFB, 0xFF, 0x0F, 0x0C, 0xD6, 0x85, 0x0B,
                /* 0470 */  0x88, 0x0B, 0x35, 0x29, 0xF1, 0xFC, 0x00, 0xAE,
                /* 0478 */  0x5B, 0xB7, 0xEF, 0x85, 0x38, 0x29, 0x77, 0x57,
                /* 0480 */  0x14, 0xC6, 0x2B, 0x49, 0x0C, 0xDF, 0x53, 0x8D,
                /* 0488 */  0x6D, 0x98, 0x03, 0x38, 0x15, 0xE3, 0x24, 0x18,
                /* 0490 */  0xFC, 0xEC, 0x40, 0xC7, 0xE5, 0xC8, 0x24, 0xBA,
                /* 0498 */  0xED, 0xFB, 0x08, 0xC1, 0x63, 0x8E, 0x9E, 0x82,
                /* 04A0 */  0x18, 0xD0, 0x19, 0x4E, 0x2A, 0x68, 0x15, 0x20,
                /* 04A8 */  0x9A, 0x02, 0xE6, 0xE6, 0x0A, 0xF8, 0xFB, 0xFF,
                /* 04B0 */  0xDF, 0x5C, 0x01, 0x56, 0xB8, 0x54, 0xA8, 0x51,
                /* 04B8 */  0xEA, 0x91, 0x02, 0x5C, 0x77, 0x40, 0xDF, 0xC2,
                /* 04C0 */  0x70, 0x92, 0x80, 0x74, 0x65, 0x3D, 0x8D, 0x07,
                /* 04C8 */  0x00, 0x5F, 0x29, 0x60, 0x5C, 0x3C, 0xD9, 0x11,
                /* 04D0 */  0x87, 0xDF, 0xAE, 0x7D, 0x2C, 0x00, 0xE6, 0xFF,
                /* 04D8 */  0xFF, 0x2B, 0x21, 0x58, 0x8F, 0x05, 0xC0, 0x5B,
                /* 04E0 */  0xA4, 0x4B, 0x8B, 0x66, 0x8F, 0x05, 0xE0, 0x12,
                /* 04E8 */  0xBF, 0x0A, 0x7A, 0x50, 0xB1, 0x5C, 0x18, 0x94,
                /* 04F0 */  0x84, 0xB1, 0x43, 0x19, 0xCD, 0xC1, 0x1C, 0x43,
                /* 04F8 */  0x70, 0x76, 0x86, 0x31, 0x1C, 0x1F, 0xA8, 0xA7,
                /* 0500 */  0xFE, 0x58, 0x7B, 0x1A, 0xAF, 0x68, 0xBE, 0xE2,
                /* 0508 */  0xF9, 0x3E, 0x4A, 0x87, 0x88, 0xBA, 0xEA, 0x79,
                /* 0510 */  0xAC, 0x6F, 0x05, 0xA7, 0xF6, 0xAC, 0xE7, 0x6B,
                /* 0518 */  0x8B, 0x61, 0x12, 0x78, 0x88, 0x0C, 0x8D, 0x13,
                /* 0520 */  0xBC, 0x23, 0x19, 0x9A, 0xCB, 0x80, 0xD0, 0x5D,
                /* 0528 */  0xE9, 0x35, 0xC0, 0x73, 0x33, 0x41, 0xF7, 0x43,
                /* 0530 */  0x97, 0x42, 0x04, 0x9D, 0x00, 0xDE, 0x09, 0x6A,
                /* 0538 */  0x14, 0xE0, 0xED, 0x2A, 0x20, 0x5B, 0x02, 0xC4,
                /* 0540 */  0x8D, 0x5E, 0x58, 0x6F, 0x45, 0x51, 0x42, 0x44,
                /* 0548 */  0x08, 0x1A, 0xC5, 0x78, 0x11, 0x42, 0x85, 0x88,
                /* 0550 */  0x12, 0xB5, 0x39, 0x10, 0x5D, 0x8E, 0xA2, 0x06,
                /* 0558 */  0x89, 0x16, 0xCC, 0x08, 0xCC, 0xFE, 0x20, 0x88,
                /* 0560 */  0xF4, 0x67, 0x80, 0x2E, 0x33, 0xBE, 0x0C, 0x7B,
                /* 0568 */  0x34, 0xFC, 0x2C, 0xC5, 0x87, 0x7A, 0x8E, 0x8F,
                /* 0570 */  0x8A, 0xEC, 0xFF, 0x0F, 0xF2, 0x5A, 0x68, 0x9D,
                /* 0578 */  0xE3, 0x24, 0x87, 0x1C, 0x83, 0xEB, 0x0C, 0x01,
                /* 0580 */  0xCD, 0x35, 0xA0, 0x8E, 0xFD, 0x1E, 0xAF, 0xBF,
                /* 0588 */  0x1A, 0x86, 0xE3, 0x43, 0xF4, 0xA1, 0xC2, 0x13,
                /* 0590 */  0x38, 0x44, 0x06, 0xE8, 0x43, 0x04, 0xFC, 0xF1,
                /* 0598 */  0x18, 0xFA, 0x29, 0xC2, 0x13, 0x7E, 0xA1, 0x25,
                /* 05A0 */  0x83, 0x40, 0x9D, 0x34, 0xF8, 0x48, 0x5F, 0xB8,
                /* 05A8 */  0xD9, 0xED, 0xC3, 0x04, 0x16, 0x7B, 0x76, 0xA0,
                /* 05B0 */  0xE3, 0x01, 0xBF, 0xE2, 0x33, 0x81, 0xAE, 0x71,
                /* 05B8 */  0xC6, 0xF6, 0xC9, 0xC8, 0x11, 0x0E, 0x22, 0x50,
                /* 05C0 */  0x40, 0x9F, 0x4D, 0xF8, 0xCD, 0x83, 0x1D, 0x2D,
                /* 05C8 */  0xB8, 0xA8, 0xA3, 0x05, 0xEA, 0xB4, 0xE0, 0x83,
                /* 05D0 */  0x02, 0x43, 0x7C, 0xF8, 0x34, 0xC4, 0x93, 0x05,
                /* 05D8 */  0x3B, 0xEA, 0x80, 0x53, 0xDE, 0x21, 0x04, 0x14,
                /* 05E0 */  0x20, 0x3E, 0x59, 0xB0, 0x79, 0x61, 0x08, 0x2C,
                /* 05E8 */  0x12, 0x1E, 0x75, 0xE8, 0x30, 0x3C, 0x3F, 0x25,
                /* 05F0 */  0x3C, 0x8E, 0x30, 0xEC, 0x37, 0x12, 0x4F, 0xE1,
                /* 05F8 */  0x70, 0x7C, 0xA4, 0x30, 0x42, 0xF0, 0x72, 0x4F,
                /* 0600 */  0x16, 0xE4, 0x62, 0x73, 0x74, 0xFF, 0xFF, 0x27,
                /* 0608 */  0x18, 0xCC, 0x50, 0x3D, 0x04, 0x7E, 0x5E, 0xF0,
                /* 0610 */  0x10, 0xF8, 0x00, 0x5A, 0x9D, 0x1D, 0x39, 0x9F,
                /* 0618 */  0x9C, 0x13, 0x6E, 0xBC, 0x7C, 0x4C, 0xD8, 0x01,
                /* 0620 */  0xF0, 0xE0, 0x4B, 0xF2, 0x59, 0x84, 0xC6, 0x58,
                /* 0628 */  0xBE, 0x8F, 0x23, 0x80, 0x9C, 0x49, 0x3C, 0x81,
                /* 0630 */  0x44, 0x78, 0x19, 0x09, 0x12, 0xE2, 0x58, 0x5E,
                /* 0638 */  0x43, 0x0C, 0x12, 0xE3, 0xED, 0xC8, 0xC7, 0x11,
                /* 0640 */  0x0E, 0xF3, 0x4C, 0x62, 0xB8, 0x87, 0x83, 0x57,
                /* 0648 */  0x91, 0x17, 0x12, 0xC3, 0x3C, 0x8A, 0xF8, 0x7C,
                /* 0650 */  0x10, 0xC3, 0x98, 0xA1, 0xA2, 0x9D, 0x80, 0x8F,
                /* 0658 */  0x23, 0xEC, 0x58, 0xE9, 0xA1, 0xFA, 0x38, 0x02,
                /* 0660 */  0x58, 0xFA, 0xFF, 0x1F, 0x47, 0x80, 0xF9, 0x11,
                /* 0668 */  0x01, 0x77, 0xDA, 0x80, 0x7B, 0x9F, 0x08, 0xF1,
                /* 0670 */  0xA4, 0xF1, 0x92, 0xF0, 0xAC, 0x01, 0x5C, 0x84,
                /* 0678 */  0x6A, 0x39, 0xF7, 0xB0, 0x34, 0x8F, 0x01, 0x1D,
                /* 0680 */  0xCF, 0x38, 0x87, 0x35, 0x01, 0x69, 0x98, 0xFC,
                /* 0688 */  0xCA, 0xED, 0x73, 0xC1, 0xD9, 0x3D, 0x72, 0x1B,
                /* 0690 */  0x26, 0xC8, 0x13, 0xC1, 0x6B, 0x94, 0xC1, 0x05,
                /* 0698 */  0xA9, 0xF3, 0x23, 0x4F, 0x4F, 0x21, 0xDD, 0x27,
                /* 06A0 */  0x5A, 0x94, 0xD2, 0x63, 0x1A, 0x05, 0xF1, 0x19,
                /* 06A8 */  0xC1, 0x21, 0xCE, 0x31, 0xE8, 0xE1, 0x7B, 0x0E,
                /* 06B0 */  0x67, 0x74, 0x20, 0xEF, 0x01, 0xEC, 0xFE, 0x08,
                /* 06B8 */  0x3C, 0x4F, 0x3A, 0x78, 0x74, 0xDF, 0x14, 0xCE,
                /* 06C0 */  0xF3, 0x4C, 0xFF, 0xFF, 0x47, 0x04, 0xDE, 0x99,
                /* 06C8 */  0xFA, 0x82, 0x09, 0x9C, 0x43, 0xDC, 0x05, 0x50,
                /* 06D0 */  0xB2, 0xEF, 0x02, 0x14, 0xC4, 0x13, 0xF3, 0xD5,
                /* 06D8 */  0x0F, 0x0E, 0xFE, 0xAB, 0x1F, 0x30, 0xB9, 0x2C,
                /* 06E0 */  0xF8, 0x9A, 0x04, 0xBE, 0x53, 0x3F, 0xFE, 0xC2,
                /* 06E8 */  0xE0, 0xDB, 0xC0, 0xC3, 0x13, 0x1B, 0x14, 0xF8,
                /* 06F0 */  0xA1, 0x7C, 0x3D, 0x04, 0xFF, 0xFF, 0xFF, 0x7A,
                /* 06F8 */  0x08, 0x3C, 0x95, 0x3A, 0xB5, 0xA9, 0xF0, 0x7A,
                /* 0700 */  0x08, 0xAE, 0x28, 0xD7, 0x12, 0xD4, 0xAD, 0xC9,
                /* 0708 */  0x82, 0x80, 0x74, 0x3F, 0x7F, 0xBE, 0x31, 0xA6,
                /* 0710 */  0xCF, 0x25, 0xF0, 0xEE, 0xA0, 0x5A, 0x95, 0xEE,
                /* 0718 */  0x25, 0x3C, 0x38, 0x85, 0xA2, 0x1F, 0x1E, 0x50,
                /* 0720 */  0x61, 0x0F, 0x0F, 0x14, 0xC4, 0x17, 0x23, 0xDF,
                /* 0728 */  0x4B, 0x00, 0x0E, 0xFC, 0xFF, 0x47, 0xC4, 0x6F,
                /* 0730 */  0xDA, 0x70, 0x8E, 0x16, 0x98, 0x19, 0x81, 0xF5,
                /* 0738 */  0x44, 0xE0, 0x9B, 0x36, 0xE0, 0xE8, 0xE4, 0x02,
                /* 0740 */  0x5C, 0x4E, 0x25, 0x80, 0x2B, 0xAF, 0xA7, 0x12,
                /* 0748 */  0xFD, 0xFF, 0x4F, 0x25, 0xE0, 0xBA, 0x7B, 0x81,
                /* 0750 */  0xE9, 0x6A, 0x72, 0x26, 0xD1, 0x82, 0xFB, 0xEE,
                /* 0758 */  0x05, 0xF0, 0xF3, 0xFF, 0x7F, 0xF7, 0x02, 0x88,
                /* 0760 */  0xE9, 0xF5, 0xEE, 0x05, 0xBC, 0xCE, 0x25, 0x98,
                /* 0768 */  0xBB, 0x97, 0xFF, 0xFF, 0x77, 0x2F, 0x80, 0xFF,
                /* 0770 */  0xFF, 0xFF, 0xBB, 0x17, 0x40, 0x96, 0x53, 0x09,
                /* 0778 */  0xC8, 0xB2, 0x9D, 0x4A, 0xD0, 0x0A, 0xCF, 0xD1,
                /* 0780 */  0x50, 0x27, 0x70, 0x28, 0x4F, 0x18, 0xAF, 0xEA,
                /* 0788 */  0x09, 0xAC, 0xE7, 0xF2, 0x85, 0x52, 0x02, 0xA3,
                /* 0790 */  0xCB, 0x17, 0xB0, 0xFB, 0xFF, 0x5F, 0xBE, 0x00,
                /* 0798 */  0x3E, 0x04, 0xBA, 0x0B, 0xA0, 0x22, 0xDC, 0x05,
                /* 07A0 */  0x28, 0x88, 0x2F, 0x5F, 0x80, 0x97, 0x50, 0x10,
                /* 07A8 */  0x32, 0x72, 0x93, 0xA0, 0x97, 0x2F, 0x38, 0x17,
                /* 07B0 */  0x07, 0xDF, 0x8F, 0x3C, 0x28, 0x78, 0xFF, 0xFF,
                /* 07B8 */  0x41, 0xC1, 0x19, 0xCC, 0x79, 0x17, 0x7B, 0x52,
                /* 07C0 */  0xA4, 0xD7, 0x13, 0xB8, 0x77, 0x0E, 0x8F, 0x0D,
                /* 07C8 */  0x1C, 0xE2, 0xAE, 0x60, 0xC0, 0xDE, 0xE5, 0xED,
                /* 07D0 */  0x04, 0x5C, 0xDA, 0xD6, 0xAE, 0xDB, 0x09, 0x2E,
                /* 07D8 */  0xE1, 0x71, 0x1A, 0xF2, 0xF1, 0x04, 0x93, 0xE7,
                /* 07E0 */  0x76, 0x82, 0x4A, 0x02, 0xA3, 0x2C, 0x24, 0x3A,
                /* 07E8 */  0x42, 0x70, 0xF5, 0x37, 0x31, 0x0A, 0x62, 0x0B,
                /* 07F0 */  0xB7, 0x13, 0x40, 0xC7, 0xFF, 0xFF, 0x76, 0x02,
                /* 07F8 */  0xFC, 0xC7, 0x0C, 0x67, 0x44, 0xEF, 0x15, 0x86,
                /* 0800 */  0xF4, 0x19, 0x0C, 0x98, 0x06, 0x3A, 0x82, 0xA0,
                /* 0808 */  0x2F, 0x69, 0xD8, 0x04, 0x37, 0x10, 0x3A, 0x23,
                /* 0810 */  0x78, 0x17, 0x10, 0xB8, 0x13, 0x83, 0x75, 0x00,
                /* 0818 */  0x01, 0xDF, 0x59, 0x0D, 0x78, 0xFD, 0xFF, 0xCF,
                /* 0820 */  0x6A, 0xC0, 0xF4, 0x00, 0xE0, 0xB3, 0x1A, 0xA0,
                /* 0828 */  0xEA, 0xF6, 0x02, 0x32, 0x85, 0x36, 0x7D, 0x6A,
                /* 0830 */  0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D, 0x32, 0x0D,
                /* 0838 */  0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0x31, 0xBB, 0x60,
                /* 0840 */  0x8A, 0x71, 0x7B, 0xA2, 0x22, 0x96, 0x23, 0x10,
                /* 0848 */  0xEB, 0xA6, 0x90, 0x91, 0xCB, 0x86, 0x41, 0x04,
                /* 0850 */  0x64, 0xD9, 0x8B, 0x16, 0x10, 0x01, 0x11, 0x90,
                /* 0858 */  0x85, 0xBC, 0x1B, 0x04, 0x64, 0x55, 0x20, 0x02,
                /* 0860 */  0x72, 0x2A, 0x20, 0x1A, 0x11, 0x88, 0xC6, 0xF1,
                /* 0868 */  0x00, 0xC4, 0xC2, 0x81, 0x08, 0xC8, 0xEA, 0x4C,
                /* 0870 */  0x00, 0x31, 0xA9, 0x20, 0xBA, 0x43, 0x90, 0xCF,
                /* 0878 */  0x85, 0x80, 0x2C, 0x12, 0x44, 0x40, 0xCE, 0xB8,
                /* 0880 */  0x3E, 0x01, 0x39, 0x30, 0x88, 0x80, 0x1C, 0xF2,
                /* 0888 */  0x1B, 0x22, 0x20, 0x47, 0x06, 0x11, 0x90, 0x05,
                /* 0890 */  0xEB, 0x00, 0xF2, 0xFF, 0x9F, 0xA0, 0x7C, 0x10,
                /* 0898 */  0x01, 0x39, 0x3E, 0x10, 0x15, 0xE3, 0xE3, 0xAE,
                /* 08A0 */  0x45, 0x1F, 0x03, 0x02, 0x72, 0x2E, 0x10, 0x01,
                /* 08A8 */  0x39, 0x07, 0x8D, 0x80, 0x9C, 0x8A, 0x42, 0x40,
                /* 08B0 */  0x56, 0xF5, 0x76, 0x10, 0x90, 0x35, 0x82, 0x08,
                /* 08B8 */  0xC8, 0x29, 0x81, 0x68, 0x66, 0x20, 0x2A, 0xD8,
                /* 08C0 */  0x0A, 0x10, 0x53, 0x0F, 0x22, 0x20, 0x2B, 0xD5,
                /* 08C8 */  0x02, 0xC4, 0x74, 0x83, 0x08, 0xC8, 0xA9, 0xBD,
                /* 08D0 */  0x00, 0x31, 0x0D, 0xEF, 0x00, 0x01, 0x59, 0xEB,
                /* 08D8 */  0xD3, 0x43, 0x20, 0x4E, 0x0A, 0x42, 0xB5, 0xBA,
                /* 08E0 */  0x01, 0x61, 0x39, 0xED, 0x80, 0x30, 0x95, 0x7A,
                /* 08E8 */  0x40, 0x58, 0x1E, 0x3F, 0x43, 0xA6, 0x20, 0x02,
                /* 08F0 */  0xB2, 0xA2, 0x97, 0x88, 0x80, 0x2C, 0x0F, 0x44,
                /* 08F8 */  0x40, 0x96, 0x62, 0x08, 0x88, 0x09, 0x03, 0x11,
                /* 0900 */  0x90, 0x23, 0x01, 0xD1, 0x80, 0x40, 0x54, 0x9E,
                /* 0908 */  0x23, 0x20, 0xA6, 0x15, 0x44, 0x40, 0x0E, 0x08,
                /* 0910 */  0x44, 0xD3, 0x02, 0x51, 0x8D, 0xBF, 0x25, 0x01,
                /* 0918 */  0x59, 0x30, 0x88, 0x80, 0x2C, 0xCE, 0xD2, 0x51,
                /* 0920 */  0x80, 0x82, 0x08, 0xC8, 0x31, 0x35, 0x0D, 0x95,
                /* 0928 */  0x82, 0x08, 0xC8, 0x42, 0x3D, 0x01, 0x31, 0xD5,
                /* 0930 */  0x20, 0x02, 0xB2, 0x42, 0x51, 0x40, 0x4C, 0x2F,
                /* 0938 */  0x88, 0x06, 0x49, 0x80, 0x68, 0x6E, 0x20, 0xAA,
                /* 0940 */  0x5A, 0x15, 0x10, 0x8B, 0x00, 0x22, 0x20, 0xE7,
                /* 0948 */  0x06, 0xA2, 0x22, 0x5C, 0x01, 0x31, 0xE9, 0x20,
                /* 0950 */  0x02, 0x72, 0x0E, 0x20, 0xAA, 0xF9, 0x49, 0x21,
                /* 0958 */  0x20, 0x27, 0x00, 0x11, 0x90, 0xF3, 0xDB, 0x3A,
                /* 0960 */  0x1A, 0xD0, 0x87, 0x8E, 0x80, 0x9C, 0x00, 0x44,
                /* 0968 */  0x40, 0x8E, 0x03, 0x44, 0xA5, 0xFB, 0x02, 0x62,
                /* 0970 */  0x41, 0x40, 0x04, 0x64, 0x41, 0xAF, 0x11, 0x0D,
                /* 0978 */  0x9C, 0x80, 0x08, 0xC8, 0xD1, 0x8C, 0x01, 0xB1,
                /* 0980 */  0x9C, 0x20, 0x02, 0xFA, 0xFF, 0x1F, 0xA8, 0xBE,
                /* 0988 */  0x22, 0x02, 0xB2, 0x52, 0x10, 0x0D, 0x9A, 0x00,
                /* 0990 */  0xD1, 0xB4, 0x40, 0x54, 0xF1, 0x9B, 0xE4, 0xD1,
                /* 0998 */  0x81, 0x81, 0xE8, 0x88, 0x40, 0xA4, 0x1D, 0x11,
                /* 09A0 */  0x28, 0x88, 0x80, 0xFC, 0xFF, 0x07             
            })
            Method (SPEC, 1, Serialized)
            {
                Return (AMWV)
            }

            Method (DEVP, 1, Serialized)
            {
                CreateDWordField (Arg0, 0x00, DVID)
                CreateDWordField (Arg0, 0x04, PARA)
                If (LEqual (PARA, 0x01))
                {
                    Switch (ToInteger (DVID))
                    {
                        Case (0x00010011)
                        {
                            Or (\_SB.DSAF, 0x01, \_SB.DSAF)
                        }
                        Case (0x00010013)
                        {
                            Or (\_SB.DSAF, 0x02, \_SB.DSAF)
                        }
                        Case (0x00010023)
                        {
                            Or (\_SB.DSAF, 0x04, \_SB.DSAF)
                        }
                        Case (0x00060013)
                        {
                            Or (\_SB.DSAF, 0x08, \_SB.DSAF)
                        }
                        Case (0x00060015)
                        {
                            Or (\_SB.DSAF, 0x10, \_SB.DSAF)
                        }
                        Case (0x00010015)
                        {
                            Or (\_SB.DSAF, 0x20, \_SB.DSAF)
                        }
                        Case (0x00090011)
                        {
                            Or (\_SB.DSAF, 0x40, \_SB.DSAF)
                        }
                        Case (0x00070011)
                        {
                            Or (\_SB.DSAF, 0x80, \_SB.DSAF)
                        }
                        Case (0x00080013)
                        {
                            Or (\_SB.DSAF, 0x0100, \_SB.DSAF)
                        }
                        Case (0x00010019)
                        {
                            Or (\_SB.DSAF, 0x0200, \_SB.DSAF)
                        }
                        Case (0x00010017)
                        {
                            Or (\_SB.DSAF, 0x0400, \_SB.DSAF)
                        }
                        Case (0x00050011)
                        {
                            Or (\_SB.DSAF, 0x0800, \_SB.DSAF)
                        }
                        Case (0x00050012)
                        {
                            Or (\_SB.DSAF, 0x1000, \_SB.DSAF)
                        }
                        Case (0x00060017)
                        {
                            Or (\_SB.DSAF, 0x2000, \_SB.DSAF)
                        }
                        Case (0x00080021)
                        {
                            Or (\_SB.DSAF, 0x4000, \_SB.DSAF)
                        }
                        Case (0x00100011)
                        {
                            Or (\_SB.DSAF, 0x8000, \_SB.DSAF)
                        }
                        Case (0x00050001)
                        {
                            Or (\_SB.DSAF, 0x00010000, \_SB.DSAF)
                        }
                        Case (0x00120000)
                        {
                            Or (\_SB.DSAF, 0x00020000, \_SB.DSAF)
                        }
                        Case (0x00120021)
                        {
                            Or (\_SB.DSAF, 0x00040000, \_SB.DSAF)
                        }
                        Case (0x00120011)
                        {
                            Or (\_SB.DSAF, 0x00080000, \_SB.DSAF)
                        }
                        Case (0x00120023)
                        {
                            Or (\_SB.DSAF, 0x00100000, \_SB.DSAF)
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }
                ElseIf (LEqual (PARA, 0x00))
                {
                    Switch (ToInteger (DVID))
                    {
                        Case (0x00010011)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFFE, \_SB.DSAF)
                        }
                        Case (0x00010013)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFFD, \_SB.DSAF)
                        }
                        Case (0x00010023)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFFB, \_SB.DSAF)
                        }
                        Case (0x00060013)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFF7, \_SB.DSAF)
                        }
                        Case (0x00060015)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFEF, \_SB.DSAF)
                        }
                        Case (0x00010015)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFDF, \_SB.DSAF)
                        }
                        Case (0x00090011)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFFBF, \_SB.DSAF)
                        }
                        Case (0x00070011)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFF7F, \_SB.DSAF)
                        }
                        Case (0x00080013)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFEFF, \_SB.DSAF)
                        }
                        Case (0x00010019)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFDFF, \_SB.DSAF)
                        }
                        Case (0x00010017)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFFBFF, \_SB.DSAF)
                        }
                        Case (0x00050011)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFF7FF, \_SB.DSAF)
                        }
                        Case (0x00050012)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFEFFF, \_SB.DSAF)
                        }
                        Case (0x00060017)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFDFFF, \_SB.DSAF)
                        }
                        Case (0x00080021)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFFBFFF, \_SB.DSAF)
                        }
                        Case (0x00100011)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFF7FFF, \_SB.DSAF)
                        }
                        Case (0x00050001)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFEFFFF, \_SB.DSAF)
                        }
                        Case (0x00120000)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFDFFFF, \_SB.DSAF)
                        }
                        Case (0x00120021)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFFBFFFF, \_SB.DSAF)
                        }
                        Case (0x00120011)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFF7FFFF, \_SB.DSAF)
                        }
                        Case (0x00120023)
                        {
                            And (\_SB.DSAF, 0xFFFFFFFFFFEFFFFF, \_SB.DSAF)
                        }
                        Default
                        {
                            Return (0x00)
                        }

                    }
                }

                Return (0x01)
            }

            Method (SDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, 0x00, ACTN)
                Return (0x00)
            }

            Method (GDSP, 1, Serialized)
            {
                CreateDWordField (Arg0, 0x00, ACTN)
                Return (0x00)
            }

            Method (DEVS, 1, Serialized)
            {
                CreateDWordField (Arg0, 0x00, DVID)
                CreateDWordField (Arg0, 0x04, CPAR)
                Switch (ToInteger (DVID))
                {
                    Case (0x00)
                    {
                        Return (0x00)
                    }
                    Default
                    {
                        Return (0x00)
                    }

                }
            }

            Method (DSTS, 1, Serialized)
            {
                CreateDWordField (Arg0, 0x00, DVID)
                Switch (ToInteger (DVID))
                {
                    Case (0xA0000000)
                    {
                        Store (0x01, Local0)
                    }
                    Case (0x00)
                    {
                        Return (0x00)
                    }
                    Default
                    {
                        Store (0x00, Local0)
                    }

                }

                And (Local0, 0x0007FFFF, Local0)
                Return (Local0)
            }

            Method (GPID, 0, Serialized)
            {
                Return (0x00)
            }

            Method (KBFT, 1, Serialized)
            {
                Return (0x00)
            }

            Method (HKEY, 0, Serialized)
            {
                Return (0x00)
            }

            Method (CFVS, 1, Serialized)
            {
            }

            Method (CFVG, 0, Serialized)
            {
            }
        }
    }

    Scope (_SB)
    {
        Name (RAMS, 0xBC19BD98)
        OperationRegion (RAMX, SystemMemory, RAMS, 0x0100)
        Field (RAMX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            P1T1,   8, 
            P1T2,   8, 
            P1T3,   8, 
            P1T4,   8, 
            P1P1,   8, 
            P1P2,   8, 
            P1P3,   8, 
            P1P4,   8, 
            P2T1,   8, 
            P2T2,   8, 
            P2T3,   8, 
            P2T4,   8, 
            P2P1,   8, 
            P2P2,   8, 
            P2P3,   8, 
            P2P4,   8
        }
    }

    Scope (_GPE)
    {
        Name (SP1O, 0x2E)
        Name (ENT1, 0x87)
        Name (EXT1, 0xAA)
        OperationRegion (DBGP, SystemIO, 0x80, 0x08)
        Field (DBGP, ByteAcc, NoLock, Preserve)
        {
            DP80,   8
        }

        OperationRegion (ECR2, SystemIO, 0x66, 0x01)
        Field (ECR2, ByteAcc, NoLock, Preserve)
        {
            EC66,   8
        }

        OperationRegion (ECR3, SystemIO, 0x62, 0x01)
        Field (ECR3, ByteAcc, NoLock, Preserve)
        {
            EC62,   8
        }

        OperationRegion (GPBX, SystemIO, 0x0500, 0x80)
        Field (GPBX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x44), 
            GI00,   8, 
            GI01,   8, 
            GI02,   8, 
            GI03,   8, 
            GPL0,   8, 
            GPL1,   8, 
            GPL2,   8, 
            GPL3,   8
        }

        OperationRegion (SGP, SystemIO, SP1O, 0x02)
        Field (SGP, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x07), 
            LDN,    8, 
            Offset (0x28), 
            CR28,   8, 
            Offset (0x30), 
            CR30,   8, 
            Offset (0xE4), 
            CRE4,   8, 
            CRE5,   8
        }

        OperationRegion (HWM, SystemIO, IOHW, 0x0A)
        Field (HWM, ByteAcc, NoLock, Preserve)
        {
            Offset (0x05), 
            HIDX,   8, 
            HDAT,   8
        }

        IndexField (HIDX, HDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            REG2,   8, 
            REG3,   8, 
            REG4,   8, 
            Offset (0x08), 
            REG8,   8, 
            REG9,   8, 
            Offset (0x21), 
            RE21,   8, 
            RE22,   8, 
            RE23,   8, 
            RE24,   8, 
            Offset (0x27), 
            RE27,   8, 
            RE28,   8, 
            RE29,   8, 
            RE2A,   8, 
            Offset (0x41), 
            RE41,   8, 
            Offset (0x4E), 
            BANK,   8, 
            Offset (0x50), 
            RE50,   8, 
            Offset (0x53), 
            RE53,   8, 
            Offset (0x55), 
            RE55,   8, 
            Offset (0x75), 
            RE75,   8
        }

        Name (G39S, 0x00)
        Name (ECST, 0x00)
        Name (SUTR, 0x00)
        Name (SDTR, 0x00)
        Name (DUTY, 0x00)
        Method (IBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, 0x01)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Store (0x1000, Local0)
            While (LAnd (Decrement (Local0), ECIE))
            {
                Sleep (0x01)
            }
        }

        Method (OBFX, 0, Serialized)
        {
            OperationRegion (ECR1, SystemIO, 0x66, 0x01)
            Field (ECR1, ByteAcc, NoLock, Preserve)
            {
                ECOF,   1, 
                ECIE,   1, 
                Offset (0x01)
            }

            Store (0x1000, Local0)
            While (Decrement (Local0))
            {
                If (ECOF)
                {
                    Break
                }

                Sleep (0x01)
            }
        }

        Method (_E12, 0, NotSerialized)  // _Exx: Edge-Triggered GPE
        {
            Mutex (MUT0, 0x00)
            Acquire (MUT0, 0xFFFF)
            Store (ENT1, INDX)
            Store (ENT1, INDX)
            And (CR28, 0xEF, CR28)
            Store (EXT1, INDX)
            IBFX ()
            Store (0x81, EC66)
            IBFX ()
            Store (0xFF, EC62)
            IBFX ()
            Store (0x00, EC62)
            IBFX ()
            Store (0x80, EC66)
            IBFX ()
            Store (0x82, EC62)
            OBFX ()
            Store (EC62, ECST)
            If (LOr (LEqual (ECST, 0x01), LEqual (ECST, 0x02))){}
            Else
            {
                Store (ENT1, INDX)
                Store (ENT1, INDX)
                Or (CR28, 0x10, CR28)
                Store (EXT1, INDX)
                Release (MUT0)
                Return (Zero)
            }

            Store (REG3, SUTR)
            Store (REG4, SDTR)
            Store (0x00, REG3)
            Store (0x00, REG4)
            And (BANK, 0xF0, BANK)
            Or (BANK, 0x00, BANK)
            And (RE75, 0xFF, Local0)
            If (LLessEqual (Local0, \_SB.P1T1))
            {
                And (GI00, 0xEF, GI00)
                Or (GPL0, 0x10, GPL0)
                And (GI00, 0xDF, GI00)
                Or (GPL0, 0x20, GPL0)
                Store (0x01, G39S)
                And (BANK, 0xF0, BANK)
                Or (BANK, 0x02, BANK)
                Store (0xFF, RE27)
                Store (0xFF, RE28)
                Store (0xFF, RE29)
                Store (0xFF, RE2A)
                And (BANK, 0xF0, BANK)
                Or (BANK, 0x02, BANK)
                Store (REG9, DUTY)
                While (LNotEqual (DUTY, 0xFF))
                {
                    And (BANK, 0xF0, BANK)
                    Or (BANK, 0x02, BANK)
                    Store (REG9, DUTY)
                }

                Store (SUTR, REG3)
                Store (SDTR, REG4)
                Store (ENT1, INDX)
                Store (ENT1, INDX)
                Store (0x09, LDN)
                And (CR30, 0xFD, CR30)
                Or (CR30, 0x02, CR30)
                And (CRE4, 0xEF, CRE4)
                And (CRE5, 0xEF, CRE5)
                Store (EXT1, INDX)
                And (BANK, 0xF0, BANK)
                Or (BANK, 0x02, BANK)
                Store (\_SB.P2T1, RE21)
                Store (\_SB.P2T2, RE22)
                Store (\_SB.P2T3, RE23)
                Store (\_SB.P2T4, RE24)
                Store (\_SB.P2P1, RE27)
                Store (\_SB.P2P2, RE28)
                Store (\_SB.P2P3, RE29)
                Store (\_SB.P2P4, RE2A)
            }
            Else
            {
                Store (ENT1, INDX)
                Store (ENT1, INDX)
                Store (0x09, LDN)
                And (CR30, 0xFD, CR30)
                Or (CR30, 0x02, CR30)
                And (CRE4, 0xEF, CRE4)
                Or (CRE4, 0x10, CRE4)
                Store (EXT1, INDX)
                And (BANK, 0xF0, BANK)
                Or (BANK, 0x02, BANK)
                Store (\_SB.P1T1, RE21)
                Store (\_SB.P1T2, RE22)
                Store (\_SB.P1T3, RE23)
                Store (\_SB.P1T4, RE24)
                Store (\_SB.P1P1, RE27)
                Store (\_SB.P1P2, RE28)
                Store (\_SB.P1P3, RE29)
                Store (\_SB.P1P4, RE2A)
                And (BANK, 0xF0, BANK)
                Or (BANK, 0x02, BANK)
                Sleep (0x64)
                Store (SUTR, REG3)
                Store (SDTR, REG4)
                And (GI00, 0xEF, GI00)
                And (GPL0, 0xEF, GPL0)
                And (GI00, 0xDF, GI00)
                And (GPL0, 0xDF, GPL0)
                Store (0x02, G39S)
            }

            IBFX ()
            Store (0x81, EC66)
            IBFX ()
            Store (0xFF, EC62)
            IBFX ()
            Store (0x00, EC62)
            IBFX ()
            Store (0x81, EC66)
            IBFX ()
            Store (0x82, EC62)
            IBFX ()
            Store (G39S, EC62)
            And (BANK, 0xF0, BANK)
            Or (BANK, 0x00, BANK)
            Store (ENT1, INDX)
            Store (ENT1, INDX)
            Or (CR28, 0x10, CR28)
            Store (EXT1, INDX)
            Release (MUT0)
            Return (Zero)
        }
    }

    Scope (\)
    {
        Device (MBDA)
        {
            Name (_HID, EisaId ("PNP0A0A"))  // _HID: Hardware ID
        }
    }

    Scope (_SB.PCI0.LPC0)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Name (_GPE, 0x1E)  // _GPE: General Purpose Events

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query
            {
                \AMW0.AMWN (0xA002000B)
            }
        }
    }

    Scope (_GPE)
    {
        OperationRegion (TCOS, SystemIO, 0x0464, 0x02)
        Field (TCOS, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
                ,   1, 
            DSCI,   1
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Sleep (0xC8)
            Store (0x01, IO80)
            Sleep (0x0A)
            Store (0x00, Local1)
            If (LEqual (\_SB.PCI0.BR1A.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR1A.PMEH (0x09), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR1A.HPEH (0x09), Local0)
            }

            If (LEqual (ToInteger (TBRP), 0x22))
            {
                Store (0xFF, Local0)
                Store (0x01, Local1)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x01, Local1)
                Notify (\_SB.PCI0.BR1A.H000, Local0)
                Notify (\_SB.PCI0.BR1A.H001, Local0)
                Notify (\_SB.PCI0.BR1A.H002, Local0)
                Notify (\_SB.PCI0.BR1A.H003, Local0)
                Notify (\_SB.PCI0.BR1A.H004, Local0)
                Notify (\_SB.PCI0.BR1A.H005, Local0)
                Notify (\_SB.PCI0.BR1A.H006, Local0)
                Notify (\_SB.PCI0.BR1A.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR1B.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR1B.PMEH (0x09), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR1B.HPEH (0x09), Local0)
            }

            If (LEqual (ToInteger (TBRP), 0x23))
            {
                Store (0xFF, Local0)
                Store (0x02, Local1)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x02, Local1)
                Notify (\_SB.PCI0.BR1B.H000, Local0)
                Notify (\_SB.PCI0.BR1B.H001, Local0)
                Notify (\_SB.PCI0.BR1B.H002, Local0)
                Notify (\_SB.PCI0.BR1B.H003, Local0)
                Notify (\_SB.PCI0.BR1B.H004, Local0)
                Notify (\_SB.PCI0.BR1B.H005, Local0)
                Notify (\_SB.PCI0.BR1B.H006, Local0)
                Notify (\_SB.PCI0.BR1B.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR2A.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR2A.PMEH (0x01), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR2A.HPEH (0x01), Local0)
                If (LEqual (ToInteger (TBRP), 0x24))
                {
                    Store (0xFF, Local0)
                    Store (0x03, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x03, Local1)
                Notify (\_SB.PCI0.BR2A.H000, Local0)
                Notify (\_SB.PCI0.BR2A.H001, Local0)
                Notify (\_SB.PCI0.BR2A.H002, Local0)
                Notify (\_SB.PCI0.BR2A.H003, Local0)
                Notify (\_SB.PCI0.BR2A.H004, Local0)
                Notify (\_SB.PCI0.BR2A.H005, Local0)
                Notify (\_SB.PCI0.BR2A.H006, Local0)
                Notify (\_SB.PCI0.BR2A.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR2B.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR2B.PMEH (0x02), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR2B.HPEH (0x02), Local0)
                If (LEqual (ToInteger (TBRP), 0x25))
                {
                    Store (0xFF, Local0)
                    Store (0x04, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x04, Local1)
                Notify (\_SB.PCI0.BR2B.H000, Local0)
                Notify (\_SB.PCI0.BR2B.H001, Local0)
                Notify (\_SB.PCI0.BR2B.H002, Local0)
                Notify (\_SB.PCI0.BR2B.H003, Local0)
                Notify (\_SB.PCI0.BR2B.H004, Local0)
                Notify (\_SB.PCI0.BR2B.H005, Local0)
                Notify (\_SB.PCI0.BR2B.H006, Local0)
                Notify (\_SB.PCI0.BR2B.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR2C.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR2C.PMEH (0x03), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR2C.HPEH (0x03), Local0)
                If (LEqual (ToInteger (TBRP), 0x26))
                {
                    Store (0xFF, Local0)
                    Store (0x05, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x05, Local1)
                Notify (\_SB.PCI0.BR2C.H000, Local0)
                Notify (\_SB.PCI0.BR2C.H001, Local0)
                Notify (\_SB.PCI0.BR2C.H002, Local0)
                Notify (\_SB.PCI0.BR2C.H003, Local0)
                Notify (\_SB.PCI0.BR2C.H004, Local0)
                Notify (\_SB.PCI0.BR2C.H005, Local0)
                Notify (\_SB.PCI0.BR2C.H006, Local0)
                Notify (\_SB.PCI0.BR2C.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR2D.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR2D.PMEH (0x04), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR2D.HPEH (0x04), Local0)
                If (LEqual (ToInteger (TBRP), 0x27))
                {
                    Store (0xFF, Local0)
                    Store (0x06, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x06, Local1)
                Notify (\_SB.PCI0.BR2D.H000, Local0)
                Notify (\_SB.PCI0.BR2D.H001, Local0)
                Notify (\_SB.PCI0.BR2D.H002, Local0)
                Notify (\_SB.PCI0.BR2D.H003, Local0)
                Notify (\_SB.PCI0.BR2D.H004, Local0)
                Notify (\_SB.PCI0.BR2D.H005, Local0)
                Notify (\_SB.PCI0.BR2D.H006, Local0)
                Notify (\_SB.PCI0.BR2D.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR3A.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR3A.PMEH (0x05), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR3A.HPEH (0x05), Local0)
                If (LEqual (ToInteger (TBRP), 0x28))
                {
                    Store (0xFF, Local0)
                    Store (0x07, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x07, Local1)
                Notify (\_SB.PCI0.BR3A.H000, Local0)
                Notify (\_SB.PCI0.BR3A.H001, Local0)
                Notify (\_SB.PCI0.BR3A.H002, Local0)
                Notify (\_SB.PCI0.BR3A.H003, Local0)
                Notify (\_SB.PCI0.BR3A.H004, Local0)
                Notify (\_SB.PCI0.BR3A.H005, Local0)
                Notify (\_SB.PCI0.BR3A.H006, Local0)
                Notify (\_SB.PCI0.BR3A.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR3B.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR3B.PMEH (0x06), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR3B.HPEH (0x06), Local0)
                If (LEqual (ToInteger (TBRP), 0x29))
                {
                    Store (0xFF, Local0)
                    Store (0x08, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x08, Local1)
                Notify (\_SB.PCI0.BR3B.H000, Local0)
                Notify (\_SB.PCI0.BR3B.H001, Local0)
                Notify (\_SB.PCI0.BR3B.H002, Local0)
                Notify (\_SB.PCI0.BR3B.H003, Local0)
                Notify (\_SB.PCI0.BR3B.H004, Local0)
                Notify (\_SB.PCI0.BR3B.H005, Local0)
                Notify (\_SB.PCI0.BR3B.H006, Local0)
                Notify (\_SB.PCI0.BR3B.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR3C.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR3C.PMEH (0x07), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR3C.HPEH (0x07), Local0)
                If (LEqual (ToInteger (TBRP), 0x2A))
                {
                    Store (0xFF, Local0)
                    Store (0x09, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x09, Local1)
                Notify (\_SB.PCI0.BR3C.H000, Local0)
                Notify (\_SB.PCI0.BR3C.H001, Local0)
                Notify (\_SB.PCI0.BR3C.H002, Local0)
                Notify (\_SB.PCI0.BR3C.H003, Local0)
                Notify (\_SB.PCI0.BR3C.H004, Local0)
                Notify (\_SB.PCI0.BR3C.H005, Local0)
                Notify (\_SB.PCI0.BR3C.H006, Local0)
                Notify (\_SB.PCI0.BR3C.H007, Local0)
            }

            If (LEqual (\_SB.PCI0.BR3D.PMEP, 0x01))
            {
                Store (\_SB.PCI0.BR3D.PMEH (0x08), Local0)
            }
            Else
            {
                Store (\_SB.PCI0.BR3D.HPEH (0x08), Local0)
                If (LEqual (ToInteger (TBRP), 0x2B))
                {
                    Store (0xFF, Local0)
                    Store (0x0A, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x0A, Local1)
                Notify (\_SB.PCI0.BR3D.H000, Local0)
                Notify (\_SB.PCI0.BR3D.H001, Local0)
                Notify (\_SB.PCI0.BR3D.H002, Local0)
                Notify (\_SB.PCI0.BR3D.H003, Local0)
                Notify (\_SB.PCI0.BR3D.H004, Local0)
                Notify (\_SB.PCI0.BR3D.H005, Local0)
                Notify (\_SB.PCI0.BR3D.H006, Local0)
                Notify (\_SB.PCI0.BR3D.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QRP0.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QRP0.PMEH (0x09), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QRP0.HPEH (0x09), Local0)
                If (LEqual (ToInteger (TBRP), 0x30))
                {
                    Store (0xFF, Local0)
                    Store (0x10, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x10, Local1)
                Notify (\_SB.PCI1.QRP0.H000, Local0)
                Notify (\_SB.PCI1.QRP0.H001, Local0)
                Notify (\_SB.PCI1.QRP0.H002, Local0)
                Notify (\_SB.PCI1.QRP0.H003, Local0)
                Notify (\_SB.PCI1.QRP0.H004, Local0)
                Notify (\_SB.PCI1.QRP0.H005, Local0)
                Notify (\_SB.PCI1.QRP0.H006, Local0)
                Notify (\_SB.PCI1.QRP0.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR2A.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR2A.PMEH (0x01), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR2A.HPEH (0x01), Local0)
                If (LEqual (ToInteger (TBRP), 0x34))
                {
                    Store (0xFF, Local0)
                    Store (0x11, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x11, Local1)
                Notify (\_SB.PCI1.QR2A.H000, Local0)
                Notify (\_SB.PCI1.QR2A.H001, Local0)
                Notify (\_SB.PCI1.QR2A.H002, Local0)
                Notify (\_SB.PCI1.QR2A.H003, Local0)
                Notify (\_SB.PCI1.QR2A.H004, Local0)
                Notify (\_SB.PCI1.QR2A.H005, Local0)
                Notify (\_SB.PCI1.QR2A.H006, Local0)
                Notify (\_SB.PCI1.QR2A.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR2B.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR2B.PMEH (0x02), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR2B.HPEH (0x02), Local0)
                If (LEqual (ToInteger (TBRP), 0x35))
                {
                    Store (0xFF, Local0)
                    Store (0x12, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x12, Local1)
                Notify (\_SB.PCI1.QR2B.H000, Local0)
                Notify (\_SB.PCI1.QR2B.H001, Local0)
                Notify (\_SB.PCI1.QR2B.H002, Local0)
                Notify (\_SB.PCI1.QR2B.H003, Local0)
                Notify (\_SB.PCI1.QR2B.H004, Local0)
                Notify (\_SB.PCI1.QR2B.H005, Local0)
                Notify (\_SB.PCI1.QR2B.H006, Local0)
                Notify (\_SB.PCI1.QR2B.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR2C.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR2C.PMEH (0x03), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR2C.HPEH (0x03), Local0)
                If (LEqual (ToInteger (TBRP), 0x36))
                {
                    Store (0xFF, Local0)
                    Store (0x13, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x13, Local1)
                Notify (\_SB.PCI1.QR2C.H000, Local0)
                Notify (\_SB.PCI1.QR2C.H001, Local0)
                Notify (\_SB.PCI1.QR2C.H002, Local0)
                Notify (\_SB.PCI1.QR2C.H003, Local0)
                Notify (\_SB.PCI1.QR2C.H004, Local0)
                Notify (\_SB.PCI1.QR2C.H005, Local0)
                Notify (\_SB.PCI1.QR2C.H006, Local0)
                Notify (\_SB.PCI1.QR2C.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR2D.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR2D.PMEH (0x04), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR2D.HPEH (0x04), Local0)
                If (LEqual (ToInteger (TBRP), 0x37))
                {
                    Store (0xFF, Local0)
                    Store (0x14, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x14, Local1)
                Notify (\_SB.PCI1.QR2D.H000, Local0)
                Notify (\_SB.PCI1.QR2D.H001, Local0)
                Notify (\_SB.PCI1.QR2D.H002, Local0)
                Notify (\_SB.PCI1.QR2D.H003, Local0)
                Notify (\_SB.PCI1.QR2D.H004, Local0)
                Notify (\_SB.PCI1.QR2D.H005, Local0)
                Notify (\_SB.PCI1.QR2D.H006, Local0)
                Notify (\_SB.PCI1.QR2D.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR3A.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR3A.PMEH (0x05), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR3A.HPEH (0x05), Local0)
                If (LEqual (ToInteger (TBRP), 0x38))
                {
                    Store (0xFF, Local0)
                    Store (0x15, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x15, Local1)
                Notify (\_SB.PCI1.QR3A.H000, Local0)
                Notify (\_SB.PCI1.QR3A.H001, Local0)
                Notify (\_SB.PCI1.QR3A.H002, Local0)
                Notify (\_SB.PCI1.QR3A.H003, Local0)
                Notify (\_SB.PCI1.QR3A.H004, Local0)
                Notify (\_SB.PCI1.QR3A.H005, Local0)
                Notify (\_SB.PCI1.QR3A.H006, Local0)
                Notify (\_SB.PCI1.QR3A.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR3B.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR3B.PMEH (0x06), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR3B.HPEH (0x06), Local0)
                If (LEqual (ToInteger (TBRP), 0x39))
                {
                    Store (0xFF, Local0)
                    Store (0x16, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x16, Local1)
                Notify (\_SB.PCI1.QR3B.H000, Local0)
                Notify (\_SB.PCI1.QR3B.H001, Local0)
                Notify (\_SB.PCI1.QR3B.H002, Local0)
                Notify (\_SB.PCI1.QR3B.H003, Local0)
                Notify (\_SB.PCI1.QR3B.H004, Local0)
                Notify (\_SB.PCI1.QR3B.H005, Local0)
                Notify (\_SB.PCI1.QR3B.H006, Local0)
                Notify (\_SB.PCI1.QR3B.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR3C.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR3C.PMEH (0x07), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR3C.HPEH (0x07), Local0)
                If (LEqual (ToInteger (TBRP), 0x3A))
                {
                    Store (0xFF, Local0)
                    Store (0x17, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x17, Local1)
                Notify (\_SB.PCI1.QR3C.H000, Local0)
                Notify (\_SB.PCI1.QR3C.H001, Local0)
                Notify (\_SB.PCI1.QR3C.H002, Local0)
                Notify (\_SB.PCI1.QR3C.H003, Local0)
                Notify (\_SB.PCI1.QR3C.H004, Local0)
                Notify (\_SB.PCI1.QR3C.H005, Local0)
                Notify (\_SB.PCI1.QR3C.H006, Local0)
                Notify (\_SB.PCI1.QR3C.H007, Local0)
            }

            If (LEqual (\_SB.PCI1.QR3D.PMEP, 0x01))
            {
                Store (\_SB.PCI1.QR3D.PMEH (0x08), Local0)
            }
            Else
            {
                Store (\_SB.PCI1.QR3D.HPEH (0x08), Local0)
                If (LEqual (ToInteger (TBRP), 0x3B))
                {
                    Store (0xFF, Local0)
                    Store (0x18, Local1)
                }
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x18, Local1)
                Notify (\_SB.PCI1.QR3D.H000, Local0)
                Notify (\_SB.PCI1.QR3D.H001, Local0)
                Notify (\_SB.PCI1.QR3D.H002, Local0)
                Notify (\_SB.PCI1.QR3D.H003, Local0)
                Notify (\_SB.PCI1.QR3D.H004, Local0)
                Notify (\_SB.PCI1.QR3D.H005, Local0)
                Notify (\_SB.PCI1.QR3D.H006, Local0)
                Notify (\_SB.PCI1.QR3D.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RRP0.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RRP0.PMEH (0x09), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RRP0.HPEH (0x09), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x20, Local1)
                Notify (\_SB.PCI2.RRP0.H000, Local0)
                Notify (\_SB.PCI2.RRP0.H001, Local0)
                Notify (\_SB.PCI2.RRP0.H002, Local0)
                Notify (\_SB.PCI2.RRP0.H003, Local0)
                Notify (\_SB.PCI2.RRP0.H004, Local0)
                Notify (\_SB.PCI2.RRP0.H005, Local0)
                Notify (\_SB.PCI2.RRP0.H006, Local0)
                Notify (\_SB.PCI2.RRP0.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR2A.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR2A.PMEH (0x01), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR2A.HPEH (0x01), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x21, Local1)
                Notify (\_SB.PCI2.RR2A.H000, Local0)
                Notify (\_SB.PCI2.RR2A.H001, Local0)
                Notify (\_SB.PCI2.RR2A.H002, Local0)
                Notify (\_SB.PCI2.RR2A.H003, Local0)
                Notify (\_SB.PCI2.RR2A.H004, Local0)
                Notify (\_SB.PCI2.RR2A.H005, Local0)
                Notify (\_SB.PCI2.RR2A.H006, Local0)
                Notify (\_SB.PCI2.RR2A.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR2B.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR2B.PMEH (0x02), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR2B.HPEH (0x02), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x22, Local1)
                Notify (\_SB.PCI2.RR2B.H000, Local0)
                Notify (\_SB.PCI2.RR2B.H001, Local0)
                Notify (\_SB.PCI2.RR2B.H002, Local0)
                Notify (\_SB.PCI2.RR2B.H003, Local0)
                Notify (\_SB.PCI2.RR2B.H004, Local0)
                Notify (\_SB.PCI2.RR2B.H005, Local0)
                Notify (\_SB.PCI2.RR2B.H006, Local0)
                Notify (\_SB.PCI2.RR2B.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR2C.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR2C.PMEH (0x03), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR2C.HPEH (0x03), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x23, Local1)
                Notify (\_SB.PCI2.RR2C.H000, Local0)
                Notify (\_SB.PCI2.RR2C.H001, Local0)
                Notify (\_SB.PCI2.RR2C.H002, Local0)
                Notify (\_SB.PCI2.RR2C.H003, Local0)
                Notify (\_SB.PCI2.RR2C.H004, Local0)
                Notify (\_SB.PCI2.RR2C.H005, Local0)
                Notify (\_SB.PCI2.RR2C.H006, Local0)
                Notify (\_SB.PCI2.RR2C.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR2D.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR2D.PMEH (0x04), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR2D.HPEH (0x04), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x24, Local1)
                Notify (\_SB.PCI2.RR2D.H000, Local0)
                Notify (\_SB.PCI2.RR2D.H001, Local0)
                Notify (\_SB.PCI2.RR2D.H002, Local0)
                Notify (\_SB.PCI2.RR2D.H003, Local0)
                Notify (\_SB.PCI2.RR2D.H004, Local0)
                Notify (\_SB.PCI2.RR2D.H005, Local0)
                Notify (\_SB.PCI2.RR2D.H006, Local0)
                Notify (\_SB.PCI2.RR2D.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR3A.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR3A.PMEH (0x05), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR3A.HPEH (0x05), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x25, Local1)
                Notify (\_SB.PCI2.RR3A.H000, Local0)
                Notify (\_SB.PCI2.RR3A.H001, Local0)
                Notify (\_SB.PCI2.RR3A.H002, Local0)
                Notify (\_SB.PCI2.RR3A.H003, Local0)
                Notify (\_SB.PCI2.RR3A.H004, Local0)
                Notify (\_SB.PCI2.RR3A.H005, Local0)
                Notify (\_SB.PCI2.RR3A.H006, Local0)
                Notify (\_SB.PCI2.RR3A.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR3B.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR3B.PMEH (0x06), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR3B.HPEH (0x06), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x26, Local1)
                Notify (\_SB.PCI2.RR3B.H000, Local0)
                Notify (\_SB.PCI2.RR3B.H001, Local0)
                Notify (\_SB.PCI2.RR3B.H002, Local0)
                Notify (\_SB.PCI2.RR3B.H003, Local0)
                Notify (\_SB.PCI2.RR3B.H004, Local0)
                Notify (\_SB.PCI2.RR3B.H005, Local0)
                Notify (\_SB.PCI2.RR3B.H006, Local0)
                Notify (\_SB.PCI2.RR3B.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR3C.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR3C.PMEH (0x07), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR3C.HPEH (0x07), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x27, Local1)
                Notify (\_SB.PCI2.RR3C.H000, Local0)
                Notify (\_SB.PCI2.RR3C.H001, Local0)
                Notify (\_SB.PCI2.RR3C.H002, Local0)
                Notify (\_SB.PCI2.RR3C.H003, Local0)
                Notify (\_SB.PCI2.RR3C.H004, Local0)
                Notify (\_SB.PCI2.RR3C.H005, Local0)
                Notify (\_SB.PCI2.RR3C.H006, Local0)
                Notify (\_SB.PCI2.RR3C.H007, Local0)
            }

            If (LEqual (\_SB.PCI2.RR3D.PMEP, 0x01))
            {
                Store (\_SB.PCI2.RR3D.PMEH (0x08), Local0)
            }
            Else
            {
                Store (\_SB.PCI2.RR3D.HPEH (0x08), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x28, Local1)
                Notify (\_SB.PCI2.RR3D.H000, Local0)
                Notify (\_SB.PCI2.RR3D.H001, Local0)
                Notify (\_SB.PCI2.RR3D.H002, Local0)
                Notify (\_SB.PCI2.RR3D.H003, Local0)
                Notify (\_SB.PCI2.RR3D.H004, Local0)
                Notify (\_SB.PCI2.RR3D.H005, Local0)
                Notify (\_SB.PCI2.RR3D.H006, Local0)
                Notify (\_SB.PCI2.RR3D.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SRP0.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SRP0.PMEH (0x00), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SRP0.HPEH (0x00), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x30, Local1)
                Notify (\_SB.PCI3.SRP0.H000, Local0)
                Notify (\_SB.PCI3.SRP0.H001, Local0)
                Notify (\_SB.PCI3.SRP0.H002, Local0)
                Notify (\_SB.PCI3.SRP0.H003, Local0)
                Notify (\_SB.PCI3.SRP0.H004, Local0)
                Notify (\_SB.PCI3.SRP0.H005, Local0)
                Notify (\_SB.PCI3.SRP0.H006, Local0)
                Notify (\_SB.PCI3.SRP0.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR2A.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR2A.PMEH (0x01), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR2A.HPEH (0x01), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x31, Local1)
                Notify (\_SB.PCI3.SR2A.H000, Local0)
                Notify (\_SB.PCI3.SR2A.H001, Local0)
                Notify (\_SB.PCI3.SR2A.H002, Local0)
                Notify (\_SB.PCI3.SR2A.H003, Local0)
                Notify (\_SB.PCI3.SR2A.H004, Local0)
                Notify (\_SB.PCI3.SR2A.H005, Local0)
                Notify (\_SB.PCI3.SR2A.H006, Local0)
                Notify (\_SB.PCI3.SR2A.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR2B.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR2B.PMEH (0x02), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR2B.HPEH (0x02), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x32, Local1)
                Notify (\_SB.PCI3.SR2B.H000, Local0)
                Notify (\_SB.PCI3.SR2B.H001, Local0)
                Notify (\_SB.PCI3.SR2B.H002, Local0)
                Notify (\_SB.PCI3.SR2B.H003, Local0)
                Notify (\_SB.PCI3.SR2B.H004, Local0)
                Notify (\_SB.PCI3.SR2B.H005, Local0)
                Notify (\_SB.PCI3.SR2B.H006, Local0)
                Notify (\_SB.PCI3.SR2B.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR2C.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR2C.PMEH (0x03), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR2C.HPEH (0x03), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x33, Local1)
                Notify (\_SB.PCI3.SR2C.H000, Local0)
                Notify (\_SB.PCI3.SR2C.H001, Local0)
                Notify (\_SB.PCI3.SR2C.H002, Local0)
                Notify (\_SB.PCI3.SR2C.H003, Local0)
                Notify (\_SB.PCI3.SR2C.H004, Local0)
                Notify (\_SB.PCI3.SR2C.H005, Local0)
                Notify (\_SB.PCI3.SR2C.H006, Local0)
                Notify (\_SB.PCI3.SR2C.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR2D.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR2D.PMEH (0x04), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR2D.HPEH (0x04), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x34, Local1)
                Notify (\_SB.PCI3.SR2D.H000, Local0)
                Notify (\_SB.PCI3.SR2D.H001, Local0)
                Notify (\_SB.PCI3.SR2D.H002, Local0)
                Notify (\_SB.PCI3.SR2D.H003, Local0)
                Notify (\_SB.PCI3.SR2D.H004, Local0)
                Notify (\_SB.PCI3.SR2D.H005, Local0)
                Notify (\_SB.PCI3.SR2D.H006, Local0)
                Notify (\_SB.PCI3.SR2D.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR3A.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR3A.PMEH (0x05), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR3A.HPEH (0x05), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x35, Local1)
                Notify (\_SB.PCI3.SR3A.H000, Local0)
                Notify (\_SB.PCI3.SR3A.H001, Local0)
                Notify (\_SB.PCI3.SR3A.H002, Local0)
                Notify (\_SB.PCI3.SR3A.H003, Local0)
                Notify (\_SB.PCI3.SR3A.H004, Local0)
                Notify (\_SB.PCI3.SR3A.H005, Local0)
                Notify (\_SB.PCI3.SR3A.H006, Local0)
                Notify (\_SB.PCI3.SR3A.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR3B.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR3B.PMEH (0x06), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR3B.HPEH (0x06), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x36, Local1)
                Notify (\_SB.PCI3.SR3B.H000, Local0)
                Notify (\_SB.PCI3.SR3B.H001, Local0)
                Notify (\_SB.PCI3.SR3B.H002, Local0)
                Notify (\_SB.PCI3.SR3B.H003, Local0)
                Notify (\_SB.PCI3.SR3B.H004, Local0)
                Notify (\_SB.PCI3.SR3B.H005, Local0)
                Notify (\_SB.PCI3.SR3B.H006, Local0)
                Notify (\_SB.PCI3.SR3B.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR3C.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR3C.PMEH (0x07), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR3C.HPEH (0x07), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x37, Local1)
                Notify (\_SB.PCI3.SR3C.H000, Local0)
                Notify (\_SB.PCI3.SR3C.H001, Local0)
                Notify (\_SB.PCI3.SR3C.H002, Local0)
                Notify (\_SB.PCI3.SR3C.H003, Local0)
                Notify (\_SB.PCI3.SR3C.H004, Local0)
                Notify (\_SB.PCI3.SR3C.H005, Local0)
                Notify (\_SB.PCI3.SR3C.H006, Local0)
                Notify (\_SB.PCI3.SR3C.H007, Local0)
            }

            If (LEqual (\_SB.PCI3.SR3D.PMEP, 0x01))
            {
                Store (\_SB.PCI3.SR3D.PMEH (0x08), Local0)
            }
            Else
            {
                Store (\_SB.PCI3.SR3D.HPEH (0x08), Local0)
            }

            If (LNotEqual (Local0, 0xFF))
            {
                Store (0x38, Local1)
                Notify (\_SB.PCI3.SR3D.H000, Local0)
                Notify (\_SB.PCI3.SR3D.H001, Local0)
                Notify (\_SB.PCI3.SR3D.H002, Local0)
                Notify (\_SB.PCI3.SR3D.H003, Local0)
                Notify (\_SB.PCI3.SR3D.H004, Local0)
                Notify (\_SB.PCI3.SR3D.H005, Local0)
                Notify (\_SB.PCI3.SR3D.H006, Local0)
                Notify (\_SB.PCI3.SR3D.H007, Local0)
            }

            If (LNotEqual (Local0, 0x00))
            {
                If (LEqual (Local1, 0x01))
                {
                    Store (0x01, \_SB.PCI0.BR1A.PMES)
                    Store (0x01, \_SB.PCI0.BR1A.PMEP)
                }

                If (LEqual (Local1, 0x02))
                {
                    Store (0x01, \_SB.PCI0.BR1B.PMES)
                    Store (0x01, \_SB.PCI0.BR1B.PMEP)
                }

                If (LEqual (Local1, 0x03))
                {
                    Store (0x01, \_SB.PCI0.BR2A.PMES)
                    Store (0x01, \_SB.PCI0.BR2A.PMEP)
                }

                If (LEqual (Local1, 0x04))
                {
                    Store (0x01, \_SB.PCI0.BR2B.PMES)
                    Store (0x01, \_SB.PCI0.BR2B.PMEP)
                }

                If (LEqual (Local1, 0x05))
                {
                    Store (0x01, \_SB.PCI0.BR2C.PMES)
                    Store (0x01, \_SB.PCI0.BR2C.PMEP)
                }

                If (LEqual (Local1, 0x06))
                {
                    Store (0x01, \_SB.PCI0.BR2D.PMES)
                    Store (0x01, \_SB.PCI0.BR2D.PMEP)
                }

                If (LEqual (Local1, 0x07))
                {
                    Store (0x01, \_SB.PCI0.BR3A.PMES)
                    Store (0x01, \_SB.PCI0.BR3A.PMEP)
                }

                If (LEqual (Local1, 0x08))
                {
                    Store (0x01, \_SB.PCI0.BR3B.PMES)
                    Store (0x01, \_SB.PCI0.BR3B.PMEP)
                }

                If (LEqual (Local1, 0x09))
                {
                    Store (0x01, \_SB.PCI0.BR3C.PMES)
                    Store (0x01, \_SB.PCI0.BR3C.PMEP)
                }

                If (LEqual (Local1, 0x0A))
                {
                    Store (0x01, \_SB.PCI0.BR3D.PMES)
                    Store (0x01, \_SB.PCI0.BR3D.PMEP)
                }

                If (LEqual (Local1, 0x10))
                {
                    Store (0x01, \_SB.PCI1.QRP0.PMES)
                    Store (0x01, \_SB.PCI1.QRP0.PMEP)
                }

                If (LEqual (Local1, 0x11))
                {
                    Store (0x01, \_SB.PCI1.QR2A.PMES)
                    Store (0x01, \_SB.PCI1.QR2A.PMEP)
                }

                If (LEqual (Local1, 0x12))
                {
                    Store (0x01, \_SB.PCI1.QR2B.PMES)
                    Store (0x01, \_SB.PCI1.QR2B.PMEP)
                }

                If (LEqual (Local1, 0x13))
                {
                    Store (0x01, \_SB.PCI1.QR2C.PMES)
                    Store (0x01, \_SB.PCI1.QR2C.PMEP)
                }

                If (LEqual (Local1, 0x14))
                {
                    Store (0x01, \_SB.PCI1.QR2D.PMES)
                    Store (0x01, \_SB.PCI1.QR2D.PMEP)
                }

                If (LEqual (Local1, 0x15))
                {
                    Store (0x01, \_SB.PCI1.QR3A.PMES)
                    Store (0x01, \_SB.PCI1.QR3A.PMEP)
                }

                If (LEqual (Local1, 0x16))
                {
                    Store (0x01, \_SB.PCI1.QR3B.PMES)
                    Store (0x01, \_SB.PCI1.QR3B.PMEP)
                }

                If (LEqual (Local1, 0x17))
                {
                    Store (0x01, \_SB.PCI1.QR3C.PMES)
                    Store (0x01, \_SB.PCI1.QR3C.PMEP)
                }

                If (LEqual (Local1, 0x18))
                {
                    Store (0x01, \_SB.PCI1.QR3D.PMES)
                    Store (0x01, \_SB.PCI1.QR3D.PMEP)
                }

                If (LEqual (Local1, 0x20))
                {
                    Store (0x01, \_SB.PCI2.RRP0.PMES)
                    Store (0x01, \_SB.PCI2.RRP0.PMEP)
                }

                If (LEqual (Local1, 0x21))
                {
                    Store (0x01, \_SB.PCI2.RR2A.PMES)
                    Store (0x01, \_SB.PCI2.RR2A.PMEP)
                }

                If (LEqual (Local1, 0x22))
                {
                    Store (0x01, \_SB.PCI2.RR2B.PMES)
                    Store (0x01, \_SB.PCI2.RR2B.PMEP)
                }

                If (LEqual (Local1, 0x23))
                {
                    Store (0x01, \_SB.PCI2.RR2C.PMES)
                    Store (0x01, \_SB.PCI2.RR2C.PMEP)
                }

                If (LEqual (Local1, 0x24))
                {
                    Store (0x01, \_SB.PCI2.RR2D.PMES)
                    Store (0x01, \_SB.PCI2.RR2D.PMEP)
                }

                If (LEqual (Local1, 0x25))
                {
                    Store (0x01, \_SB.PCI2.RR3A.PMES)
                    Store (0x01, \_SB.PCI2.RR3A.PMEP)
                }

                If (LEqual (Local1, 0x26))
                {
                    Store (0x01, \_SB.PCI2.RR3B.PMES)
                    Store (0x01, \_SB.PCI2.RR3B.PMEP)
                }

                If (LEqual (Local1, 0x27))
                {
                    Store (0x01, \_SB.PCI2.RR3C.PMES)
                    Store (0x01, \_SB.PCI2.RR3C.PMEP)
                }

                If (LEqual (Local1, 0x28))
                {
                    Store (0x01, \_SB.PCI2.RR3D.PMES)
                    Store (0x01, \_SB.PCI2.RR3D.PMEP)
                }

                If (LEqual (Local1, 0x30))
                {
                    Store (0x01, \_SB.PCI3.SRP0.PMES)
                    Store (0x01, \_SB.PCI3.SRP0.PMEP)
                }

                If (LEqual (Local1, 0x31))
                {
                    Store (0x01, \_SB.PCI3.SR2A.PMES)
                    Store (0x01, \_SB.PCI3.SR2A.PMEP)
                }

                If (LEqual (Local1, 0x32))
                {
                    Store (0x01, \_SB.PCI3.SR2B.PMES)
                    Store (0x01, \_SB.PCI3.SR2B.PMEP)
                }

                If (LEqual (Local1, 0x33))
                {
                    Store (0x01, \_SB.PCI3.SR2C.PMES)
                    Store (0x01, \_SB.PCI3.SR2C.PMEP)
                }

                If (LEqual (Local1, 0x34))
                {
                    Store (0x01, \_SB.PCI3.SR2D.PMES)
                    Store (0x01, \_SB.PCI3.SR2D.PMEP)
                }

                If (LEqual (Local1, 0x35))
                {
                    Store (0x01, \_SB.PCI3.SR3A.PMES)
                    Store (0x01, \_SB.PCI3.SR3A.PMEP)
                }

                If (LEqual (Local1, 0x36))
                {
                    Store (0x01, \_SB.PCI3.SR3B.PMES)
                    Store (0x01, \_SB.PCI3.SR3B.PMEP)
                }

                If (LEqual (Local1, 0x37))
                {
                    Store (0x01, \_SB.PCI3.SR3C.PMES)
                    Store (0x01, \_SB.PCI3.SR3C.PMEP)
                }

                If (LEqual (Local1, 0x38))
                {
                    Store (0x01, \_SB.PCI3.SR3D.PMES)
                    Store (0x01, \_SB.PCI3.SR3D.PMEP)
                }

                Store (0x01, PEES)
                Store (0x00, PMEE)
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (LNotEqual (\_SB.PCI0.RP01.DEVS (), 0x00))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.RP02.DEVS (), 0x00))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.RP03.DEVS (), 0x00))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.RP04.DEVS (), 0x00))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.RP05.DEVS (), 0x00))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.RP06.DEVS (), 0x00))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.RP07.DEVS (), 0x00))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.RP08.DEVS (), 0x00))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR1A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR1A, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR1B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR1B, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR2A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR2A, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR2B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR2B, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR2C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR2C, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR2D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR2D, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR3A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR3A, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR3B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR3B, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR3C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR3C, 0x02)
            }

            If (LNotEqual (\_SB.PCI0.BR3D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI0.BR3D, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QRP0.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QRP0, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR1A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR1A, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR1B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR1B, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR2A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR2A, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR2B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR2B, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR2C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR2C, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR2D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR2D, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR3A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR3A, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR3B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR3B, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR3C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR3C, 0x02)
            }

            If (LNotEqual (\_SB.PCI1.QR3D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI1.QR3D, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RRP0.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RRP0, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR1A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR1A, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR1B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR1B, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR2A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR2A, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR2B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR2B, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR2C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR2C, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR2D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR2D, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR3A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR3A, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR3B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR3B, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR3C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR3C, 0x02)
            }

            If (LNotEqual (\_SB.PCI2.RR3D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI2.RR3D, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SRP0.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SRP0, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR1A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR1A, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR1B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR1B, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR2A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR2A, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR2B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR2B, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR2C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR2C, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR2D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR2D, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR3A.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR3A, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR3B.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR3B, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR3C.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR3C, 0x02)
            }

            If (LNotEqual (\_SB.PCI3.SR3D.DEVS (), 0x00))
            {
                Notify (\_SB.PCI3.SR3D, 0x02)
            }
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf (LEqual (TTDP, 0x00))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If (LEqual (TTDP, 0x00))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, 0x01)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y10)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y11)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y12)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00001000,         // Address Length
                _Y13)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If (LEqual (AMDT, 0x01))
            {
                CreateDWordField (CRST, \_SB.TPM._Y10._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y10._LEN, LTFB)  // _LEN: Length
                Store (TPMB, MTFB)
                Store (0x1000, LTFB)
                CreateDWordField (CRST, \_SB.TPM._Y11._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y11._LEN, LTFC)  // _LEN: Length
                Store (TPMC, MTFC)
                Store (0x1000, LTFC)
                Return (CRST)
            }
            Else
            {
                If (LEqual (DTPT, 0x01))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y12._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y12._LEN, LTFE)  // _LEN: Length
                    Store (0xFED40000, MTFE)
                    Store (0x0880, LTFE)
                    Return (CRSD)
                }
                ElseIf (LEqual (TTPF, 0x01))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y13._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y13._LEN, LTFD)  // _LEN: Length
                    Store (0xFED40000, MTFD)
                    Store (0x5000, LTFD)
                    Return (CRSI)
                }
                ElseIf (LEqual (TTPF, 0x00))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y13._BAS, MTFF)  // _BAS: Base Address
                    Store (TPMM, MTFF)
                    Return (CRSI)
                }

                Store (0x00, MTFE)
                Store (0x00, LTFE)
                Return (CRSI)
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (LEqual (TTDP, 0x00))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }
            ElseIf (LEqual (TTDP, 0x01))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Return (0x00)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, 0x00)
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                           
                    })
                }
                Case (0x01)
                {
                    Store (0x00, TIMR)
                    If (LEqual (AMDT, 0x01))
                    {
                        While (LAnd (LEqual (BEGN, One), LLess (TIMR, 0x0200)))
                        {
                            If (LEqual (BEGN, One))
                            {
                                Sleep (0x01)
                                Increment (TIMR)
                            }
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        If (LEqual (Or (And (HSTS, 0x02), And (HSTS, 0x01)), 0x03))
                        {
                            Store (0x01, HCMD)
                        }
                        Else
                        {
                            Store (0x01, FERR)
                            Store (0x00, BEGN)
                        }

                        Return (0x00)
                    }
                }

            }

            Return (0x01)
        }

        Method (CRYF, 3, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                           
                    })
                }
                Case (0x01)
                {
                    Name (TPMV, Package (0x02)
                    {
                        0x01, 
                        Package (0x02)
                        {
                            0x01, 
                            0x20
                        }
                    })
                    If (LEqual (_STA (), 0x00))
                    {
                        Return (Package (0x01)
                        {
                            0x00
                        })
                    }

                    Return (TPMV)
                }

            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                     
                        })
                    }
                    Case (0x01)
                    {
                        If (LEqual (PPIV, 0x00))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        ToInteger (DerefOf (Index (Arg3, 0x00)), RQST)
                        Store (0x00, SRSP)
                        Store (0x02, FLAG)
                        Store (OFST, TMF1)
                        Store (0x00, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            0x00, 
                            0x00
                        })
                        Store (RQST, Index (PPI1, 0x01))
                        Return (PPI1)
                    }
                    Case (0x04)
                    {
                        Return (TRST)
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            0x00
                        })
                        Store (0x00, SRSP)
                        Store (0x05, FLAG)
                        Store (OFST, SMI)
                        Store (RCNT, Index (PPI2, 0x01))
                        Store (ERRO, Index (PPI2, 0x02))
                        Return (PPI2)
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        ToInteger (DerefOf (Index (Arg3, 0x00)), RQST)
                        Store (0x07, FLAG)
                        Store (0x00, OPTN)
                        If (LEqual (RQST, 0x17))
                        {
                            ToInteger (DerefOf (Index (Arg3, 0x01)), OPTN)
                        }

                        Store (OFST, TMF1)
                        Store (0x00, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Case (0x08)
                    {
                        ToInteger (DerefOf (Index (Arg3, 0x00)), RQST)
                        Store (0x08, FLAG)
                        Store (OFST, TMF1)
                        Store (0x00, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf (LEqual (Arg0, ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                           
                        })
                    }
                    Case (0x01)
                    {
                        ToInteger (DerefOf (Index (Arg3, 0x00)), RQST)
                        Store (0x09, FLAG)
                        Store (OFST, TMF1)
                        Store (0x00, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Default
                    {
                    }

                }
            }

            If (LEqual (Arg0, ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If (LEqual (Arg0, ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }

        Method (TPTS, 1, NotSerialized)
        {
        }
    }

    Scope (\)
    {
        Mutex (OSUM, 0x00)
        Event (WFEV)
        Name (PEMA, 0xE0000000)
        Name (TBRP, 0x07)
        Name (TBUS, 0xFF)
        Name (TBHR, 0xFF)
        Name (TBMV, 0xFF)
        Name (RPR6, 0x00)
        Name (RPR7, 0x00)
        Name (RPR8, 0x00)
        Name (RPR9, 0x00)
        Name (RPRA, 0x00)
        Name (RPRB, 0x00)
        OperationRegion (TBNV, SystemMemory, 0xFFFF0000, 0x7B7B)
        Field (TBNV, AnyAcc, Lock, Preserve)
        {
            ATSF,   8, 
            TBHS,   8, 
            THRS,   8, 
            TBWS,   8
        }

        OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
        Field (SPRT, ByteAcc, Lock, Preserve)
        {
            SSMP,   8
        }

        Method (TBWK, 1, NotSerialized)
        {
            \_SB.PCI0.RP08.TWAK (Arg0)
        }

        Method (TBPS, 1, NotSerialized)
        {
            \_SB.PCI0.RP08.TPTS (Arg0)
        }
    }

    Scope (_SB)
    {
        Method (TBFP, 1, NotSerialized)
        {
            If (Arg0){}
            Else
            {
            }
        }

        Device (WMTF)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, "TBFP")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x48, 0xFD, 0xCC, 0x86, 0x5E, 0x20, 0x77, 0x4A,
                /* 0008 */  0x9C, 0x48, 0x20, 0x21, 0xCB, 0xED, 0xE3, 0x41,
                /* 0010 */  0x54, 0x46, 0x01, 0x02                         
            })
            Method (WMTF, 3, NotSerialized)
            {
                CreateByteField (Arg2, 0x00, FP)
                If (FP)
                {
                    TBFP (0x01)
                }
                Else
                {
                    TBFP (0x00)
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (OSUP, 1, NotSerialized)
        {
            Add (Arg0, 0x0548, Local0)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                TB2P,   32, 
                P2TB,   32
            }

            Store (0x64, Local1)
            Store (0x0D, P2TB)
            While (LGreater (Local1, 0x00))
            {
                Store (Subtract (Local1, 0x01), Local1)
                Store (TB2P, Local2)
                If (LEqual (Local2, 0xFFFFFFFF))
                {
                    Return (0x02)
                }

                If (And (Local2, 0x01))
                {
                    Break
                }

                Sleep (0x32)
            }

            Store (0x00, P2TB)
            Return (0x01)
        }

        Method (TSXE, 0, NotSerialized)
        {
            Store (0x14, DBG8)
            Store (MMTB (), Local0)
            OperationRegion (PXVD, SystemMemory, Local0, 0x0550)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VIDI,   32, 
                Offset (0x548), 
                TB2P,   32, 
                P2TB,   32
            }

            Store (0x09, P2TB)
            Store (0x64, Local1)
            While (LGreater (Local1, 0x00))
            {
                Store (Subtract (Local1, 0x01), Local1)
                Store (TB2P, Local2)
                If (LEqual (Local2, 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If (And (Local2, 0x01))
                {
                    Break
                }

                Sleep (0x32)
            }

            Store (0x00, P2TB)
            Store (0x01F4, Local1)
            While (LGreater (Local1, 0x00))
            {
                Store (Subtract (Local1, 0x01), Local1)
                Store (VIDI, Local2)
                If (LNotEqual (Local2, 0xFFFFFFFF))
                {
                    Return (0x00)
                }

                Sleep (0x32)
            }

            Return (Zero)
        }

        Method (MMRP, 0, NotSerialized)
        {
            Store (PEMA, Local0)
            If (LLess (ToInteger (TBRP), 0x08))
            {
                Add (Local0, 0x000E0000, Local0)
                Store (ToInteger (TBRP), Local1)
                Multiply (Local1, 0x1000, Local1)
                Add (Local0, Local1, Local0)
            }
            Else
            {
                Add (Local0, 0x8000, Local0)
                Subtract (ToInteger (TBRP), 0x20, Local1)
                Divide (Local1, 0x04, Local5, Local4)
                Multiply (Local4, 0x8000, Local4)
                Add (Local0, Local4, Local0)
                Multiply (Local5, 0x1000, Local5)
                Add (Local0, Local5, Local0)
            }

            Return (Local0)
        }

        Method (MMTB, 0, NotSerialized)
        {
            Store (MMRP (), Local0)
            OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x19), 
                SBUS,   8
            }

            Store (SBUS, Local2)
            Store (PEMA, Local0)
            Multiply (Local2, 0x00100000, Local2)
            Add (Local0, Local2, Local0)
            Return (Local0)
        }

        Method (GDRP, 0, NotSerialized)
        {
            Store (MMRP (), Local0)
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                NBPS,   2, 
                Offset (0xA4), 
                PSD3,   2, 
                Offset (0xE4), 
                HNPS,   2
            }

            If (LLess (ToInteger (TBRP), 0x20))
            {
                Store (0x00, PSD3)
                Return (PSD3)
            }
            Else
            {
                Store (0x00, HNPS)
                Return (HNPS)
            }
        }

        Method (RPDX, 1, NotSerialized)
        {
            Store (MMRP (), Local0)
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                NBPS,   2, 
                Offset (0xA4), 
                PSD3,   2, 
                Offset (0xE4), 
                HNPS,   2
            }

            If (LLess (ToInteger (TBRP), 0x20))
            {
                Store (Arg0, PSD3)
            }
            Else
            {
                Store (Arg0, HNPS)
            }

            Sleep (0x64)
        }

        Method (TBAC, 0, NotSerialized)
        {
            Acquire (OSUM, 0xFFFF)
            Store (MMRP (), Local0)
            OperationRegion (RP_X, SystemMemory, Local0, 0x0100)
            Field (RP_X, AnyAcc, NoLock, Preserve)
            {
                Offset (0x08), 
                RDCC,   32, 
                Offset (0x18), 
                PBUS,   8, 
                SBUS,   8, 
                SUBS,   8, 
                Offset (0x84), 
                NBPS,   2, 
                Offset (0xA4), 
                PSD3,   2, 
                Offset (0xE4), 
                HNPS,   2
            }

            Store (0x00, Local1)
            While (0x01)
            {
                If (LAnd (LNotEqual (RDCC, 0xFFFFFFFF), LNotEqual (SBUS, 0xFF)))
                {
                    If (LAnd (LLess (ToInteger (TBRP), 0x10), LEqual (PSD3, 0x00)))
                    {
                        Break
                    }

                    If (LAnd (LGreaterEqual (ToInteger (TBRP), 0x10), LEqual (HNPS, 0x00)))
                    {
                        Break
                    }
                }
                Else
                {
                    Add (Local1, 0x01, Local1)
                    If (LGreater (Local1, 0x03E8))
                    {
                        Store (0x7BAC, DBG9)
                        Sleep (0x03E8)
                        Break
                    }
                    Else
                    {
                        Sleep (0x10)
                    }
                }
            }

            Release (OSUM)
        }

        Method (NTFY, 0, Serialized)
        {
            Sleep (0x64)
            Switch (ToInteger (TBRP))
            {
                Case (0x00)
                {
                    Notify (\_SB.PCI0.RP01, 0x00)
                }
                Case (0x01)
                {
                    Notify (\_SB.PCI0.RP02, 0x00)
                }
                Case (0x02)
                {
                    Notify (\_SB.PCI0.RP03, 0x00)
                }
                Case (0x03)
                {
                    Notify (\_SB.PCI0.RP04, 0x00)
                }
                Case (0x04)
                {
                    Notify (\_SB.PCI0.RP05, 0x00)
                }
                Case (0x05)
                {
                    Notify (\_SB.PCI0.RP06, 0x00)
                }
                Case (0x06)
                {
                    Notify (\_SB.PCI0.RP07, 0x00)
                }
                Case (0x07)
                {
                    Notify (\_SB.PCI0.RP08, 0x00)
                }
                Case (0x20)
                {
                    Notify (\_SB.PCI0.BR1A, 0x00)
                }
                Case (0x21)
                {
                    Notify (\_SB.PCI0.BR1B, 0x00)
                }
                Case (0x24)
                {
                    Notify (\_SB.PCI0.BR2A, 0x00)
                }
                Case (0x25)
                {
                    Notify (\_SB.PCI0.BR2B, 0x00)
                }
                Case (0x26)
                {
                    Notify (\_SB.PCI0.BR2C, 0x00)
                }
                Case (0x27)
                {
                    Notify (\_SB.PCI0.BR2D, 0x00)
                }
                Case (0x28)
                {
                    Notify (\_SB.PCI0.BR3A, 0x00)
                }
                Case (0x29)
                {
                    Notify (\_SB.PCI0.BR3B, 0x00)
                }
                Case (0x2A)
                {
                    Notify (\_SB.PCI0.BR3C, 0x00)
                }
                Case (0x2B)
                {
                    Notify (\_SB.PCI0.BR3D, 0x00)
                }

            }
        }

        Method (TBFF, 0, NotSerialized)
        {
            Store (MMTB (), Local0)
            OperationRegion (PXVD, SystemMemory, Local0, 0x04)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VEDI,   32
            }

            Store (VEDI, Local1)
            If (LEqual (Local1, 0xFFFFFFFF))
            {
                Return (OSUP (Local0))
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (OE1X, 0, NotSerialized)
        {
            Name (TSNE, 0xFF)
            If (LLess (OSVR, 0x0E))
            {
                Return (Zero)
            }

            Wait (WFEV, 0xFFFF)
            Signal (WFEV)
            TBAC ()
            Acquire (OSUM, 0xFFFF)
            If (LNotEqual (TBHR, 0x01))
            {
                Store (TBFF (), Local0)
                If (LEqual (Local0, 0x01))
                {
                    Sleep (0x10)
                    Release (OSUM)
                    Return (Zero)
                }

                If (LEqual (Local0, 0x02))
                {
                    If (And (TSNE, 0x02))
                    {
                        Sleep (0x10)
                        NTFY ()
                    }

                    Store (0x7D, DBG8)
                    Release (OSUM)
                    Return (Zero)
                }
            }

            If (And (TSNE, 0x01))
            {
                Store (TBSW, SSMP)
            }

            If (And (TSNE, 0x02))
            {
                NTFY ()
            }

            Sleep (0x10)
            Release (OSUM)
            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP08)
    {
        Method (TINI, 0, NotSerialized)
        {
            If (LLess (OSVR, 0x0E))
            {
                Return (Zero)
            }

            If (LAnd (LNotEqual (TBHR, 0xFF), LNotEqual (TBHR, 0x01)))
            {
                \_GPE.TBAC ()
                Acquire (OSUM, 0xFFFF)
                Store (0x51, DBG8)
                Store (\_GPE.MMTB (), Local3)
                \_GPE.OSUP (Local3)
                Release (OSUM)
                Signal (WFEV)
            }
            Return (Zero)
        }

        Method (TWAK, 1, NotSerialized)
        {
            Name (RPL1, 0x00)
            Name (RPL6, 0x00)
            Name (RPL7, 0x00)
            Name (RPL8, 0x00)
            Name (RPL9, 0x00)
            Name (RPLA, 0x00)
            Name (RPLB, 0x00)
            If (LLess (OSVR, 0x0E))
            {
                Return (Zero)
            }

            If (LAnd (LNotEqual (TBHR, 0xFF), LNotEqual (TBHR, 0x01)))
            {
                \_GPE.TBAC ()
                Acquire (OSUM, 0xFFFF)
                If (LEqual (ToInteger (THRS), 0x01))
                {
                    If (LEqual (ToInteger (TBWS), 0x00))
                    {
                        Sleep (0x01F4)
                    }

                    \_GPE.TSXE ()
                    If (LGreater (ToInteger (TBRP), 0x0F))
                    {
                        Sleep (0x0258)
                    }
                }

                Store (\_GPE.MMRP (), Local0)
                OperationRegion (RP_X, SystemMemory, Local0, 0x34)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32, 
                    REG8,   32, 
                    REG9,   32, 
                    REGA,   32, 
                    REGB,   32, 
                    REGC,   32
                }

                Store (REG1, RPL1)
                Store (REG6, RPL6)
                Store (REG7, RPL7)
                Store (REG8, RPL8)
                Store (REG9, RPL9)
                Store (REGA, RPLA)
                Store (REGB, RPLB)
                Store (RPR6, REG6)
                Store (RPR7, REG7)
                Store (RPR8, REG8)
                Store (RPR9, REG9)
                Store (RPRA, REGA)
                Store (RPRB, REGB)
                Store (0x00100007, REG1)
                Store (\_GPE.GDRP (), Local2)
                \_GPE.RPDX (Zero)
                Store (\_GPE.MMTB (), Local3)
                \_GPE.OSUP (Local3)
                Store (TBSW, SSMP)
                Store (RPL1, REG1)
                Store (RPL6, REG6)
                Store (RPL7, REG7)
                Store (RPL8, REG8)
                Store (RPL9, REG9)
                Store (RPLA, REGA)
                Store (RPLB, REGB)
                \_GPE.RPDX (Local2)
                Release (OSUM)
                \_GPE.NTFY ()
            }

            Signal (WFEV)
            Return (Zero)
        }

        Method (TPTS, 1, NotSerialized)
        {
            If (LLess (OSVR, 0x0E))
            {
                Return (Zero)
            }

            If (LAnd (LNotEqual (TBHR, 0xFF), LNotEqual (TBHR, 0x01)))
            {
                Acquire (OSUM, 0xFFFF)
                Store (\_GPE.MMRP (), Local0)
                OperationRegion (RP_X, SystemMemory, Local0, 0x34)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32, 
                    REG8,   32, 
                    REG9,   32, 
                    REGA,   32, 
                    REGB,   32, 
                    REGC,   32
                }

                Store (REG6, RPR6)
                Store (REG7, RPR7)
                Store (REG8, RPR8)
                Store (REG9, RPR9)
                Store (REGA, RPRA)
                Store (REGB, RPRB)
                Release (OSUM)
            }

            Reset (WFEV)
            Return (Zero)
        }
    }

    OperationRegion (_SB.PCI0.LPC0.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.LPC0.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, _Y14)
                {15}
        })
        CreateWordField (BUFA, \_SB._Y14._INT, IRA0)  // _INT: Interrupts
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRA, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRA, 0x80, PIRA)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRA, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRA)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRB, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRB, 0x80, PIRB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRB, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRB)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRC, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRC, 0x80, PIRC)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRC, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRC)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRD, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRD, 0x80, PIRD)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRD, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRD)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRE, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRE, 0x80, PIRE)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRE, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRE)
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRF, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRF, 0x80, PIRF)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRF, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRF)
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRG, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRG, 0x80, PIRG)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRG, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRG)
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                And (PIRH, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRH, 0x80, PIRH)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                And (PIRH, 0x0F, Local0)
                ShiftLeft (0x01, Local0, IRA0)
                Return (BUFA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRH)
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, 0x00)
        Name (XNPT, 0x01)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0xFFFF)
            Add (Arg0, PEBS, Local0)
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG)
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0xFFFF)
            And (Arg0, 0xFFFFFFFE, Arg0)
            Add (Arg0, PEBS, Local0)
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG)
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0xFFFF)
            And (Arg0, 0xFFFFFFFC, Arg0)
            Add (Arg0, PEBS, Local0)
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG)
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0xFFFF)
            Add (Arg0, PEBS, Local0)
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Store (Arg1, XCFG)
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0xFFFF)
            And (Arg0, 0xFFFFFFFE, Arg0)
            Add (Arg0, PEBS, Local0)
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Store (Arg1, XCFG)
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0xFFFF)
            And (Arg0, 0xFFFFFFFC, Arg0)
            Add (Arg0, PEBS, Local0)
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Store (Arg1, XCFG)
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0xFFFF)
            And (Arg0, 0xFFFFFFFC, Arg0)
            Add (Arg0, PEBS, Local0)
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            And (XCFG, Arg2, Local1)
            Or (Local1, Arg1, XCFG)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Add (Arg0, 0x84, Local0)
            Store (RDPE (Local0), Local1)
            If (LEqual (Local1, 0xFFFFFFFF))
            {
                Return (0x00)
            }
            Else
            {
                If (LAnd (Local1, 0x00010000))
                {
                    WDPE (Local0, And (Local1, 0x00010000))
                    Return (0x01)
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PCI0.BR1A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                           
                    })
                }

                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x01, 
                        Unicode (" Slot01 x8")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.PCI0.BR2A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                           
                    })
                }

                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x06, 
                        Unicode (" Slot06 x16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.PCI0.BR3A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                           
                    })
                }

                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x04, 
                        Unicode (" Slot04 x16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.PCI1.QR1A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                           
                    })
                }

                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x05, 
                        Unicode (" Slot05 x8")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.PCI1.QR2A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                           
                    })
                }

                If (LAnd (LEqual (Arg1, 0x02), LEqual (Arg2, 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x02, 
                        Unicode (" Slot02 x16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB)
    {
        Device (INTS)
        {
            Name (_HID, EisaId ("INT3510"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Intel Nitrous Device"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (CPUT, 0x02))
                {
                    If (LEqual (SCUF, 0x00))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }
                Else
                {
                    Return (0x00)
                }
            }
        }
    }

    Device (_SB.USBX)
    {
        Name (_ADR, Zero)  // _ADR: Address
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (LNot (Arg2))
            {
                Return (Buffer (One)
                {
                     0x03                                           
                })
            }

            Return (Package (0x08)
            {
                "kUSBSleepPortCurrentLimit", 
                0x0834, 
                "kUSBSleepPowerSupply", 
                0x13EC, 
                "kUSBWakePortCurrentLimit", 
                0x0834, 
                "kUSBWakePowerSupply", 
                0x13EC
            })
        }
    }
    
    
    External (_SB_.PCI0.XHCI, DeviceObj)    // (from opcode)
    External (DTGP, MethodObj)    // 5 Arguments (from opcode)

    Scope (\_SB.PCI0.XHCI)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Store (Package (0x1B)
                {
                    "AAPL,slot-name", 
                    Buffer (0x09)
                    {
                        "Built In"
                    }, 

                    "built-in", 
                    Buffer (One)
                    {
                         0x00                                           
                    }, 

                    "device-id", 
                    Buffer (0x04)
                    {
                         0x31, 0x8D, 0x00, 0x00                         
                    }, 

                    "name", 
                    Buffer (0x34)
                    {
                        "Intel XHC USB Controller"
                    }, 

                    "model", 
                    Buffer (0x2F)
                    {
                        "Intel X99-PRO Chipset XHC USB Host Controller"
                    }, 

                    "AAPL,current-available", 
                    0x0834, 
                    "AAPL,current-extra", 
                    0x0A8C, 
                    "AAPL,current-in-sleep", 
                    0x0A8C, 
                    "AAPL,max-port-current-in-sleep", 
                    0x0834, 
                    "AAPL,device-internal", 
                    Zero, 
                    "AAPL,clock-id", 
                    Buffer (One)
                    {
                         0x01                                           
                    }, 

                    "AAPL,root-hub-depth", 
                    0x1A, 
                    "AAPL,XHC-clock-id", 
                    One, 
                    Buffer (One)
                    {
                         0x00                                           
                    }
                }, Local0)
            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
            Return (Local0)
        }
    }

    External (_SB_.PCI0.RP05, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.RP05.D07D, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.RP05.D082, DeviceObj)    // (from opcode)
    External (DTGP, MethodObj)    // 5 Arguments (from opcode)

    Scope (_SB.PCI0.RP05)
    {
        Scope (D07D)
        {
            Name (_STA, Zero)  // _STA: Status
        }

        Scope (D082)
        {
            Name (_STA, Zero)  // _STA: Status
        }

        Device (XHC2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }

                Store (Package (0x0A)
                    {
                        "AAPL,slot-name", 
                        Buffer (0x09)
                        {
                            "Built In"
                        }, 

                        "built-in", 
                        Buffer (One)
                        {
                             0x00                                           
                        }, 

                        "device-id", 
                        Buffer (0x04)
                        {
                             0x42, 0x12, 0x00, 0x00                         
                        }, 

                        "name", 
                        Buffer (0x1B)
                        {
                            "ASMedia USB 3.1 Controller"
                        }, 

                        "model", 
                        Buffer (0x28)
                        {
                            "ASMedia ASM1142 USB 3.1 Type-A & Type-C"
                        }
                    }, Local0)
                DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                Return (Local0)
            }
        }
    }
    
    // SATA FIX

    External (_SB_.PCI0.EVSS, DeviceObj)    // (from opcode)
    External (DTGP, MethodObj)    // 5 Arguments (from opcode)

    Scope (_SB.PCI0.EVSS)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Store (Package (0x0E)
                {
                    "AAPL,slot-name", 
                    Buffer (0x09)
                    {
                        "Built In"
                    }, 

                    "built-in", 
                    Buffer (0x05)
                    {
                        "0x00"
                    }, 

                    "name", 
                    Buffer (0x1B)
                    {
                        "Intel X99 sSata Controller"
                    }, 

                    "model", 
                    Buffer (0x28)
                    {
                        "Intel X99-A II Chipset sSATA Controller"
                    }, 

                    "compatible", 
                    Buffer (0x0D)
                    {
                        "pci8086,8d62"
                    }, 

                    "device_type", 
                    Buffer (0x10)
                    {
                        "AHCI Controller"
                    }, 

                    "device-id", 
                    Buffer (0x04)
                    {
                         0x62, 0x8D, 0x00, 0x00                         
                    }
                }, Local0)
            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
            Return (Local0)
        }
    }

    External (_SB_.PCI0.SAT1, DeviceObj)    // (from opcode)
    External (DTGP, MethodObj)    // 5 Arguments (from opcode)

    Scope (\_SB.PCI0.SAT1)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Store (Package (0x0C)
                {
                    "AAPL,slot-name", 
                    Buffer (0x09)
                    {
                        "Built In"
                    }, 

                    "built-in", 
                    Buffer (One)
                    {
                         0x00                                           
                    }, 

                    "name", 
                    Buffer (0x1B)
                    {
                        "Intel SATA AHCI Controller"
                    }, 

                    "model", 
                    Buffer (0x27)
                    {
                        "Intel X99-A II Chipset SATA Controller"
                    }, 

                    "device_type", 
                    Buffer (0x15)
                    {
                        "AHCI SATA Controller"
                    }, 

                    "device-id", 
                    Buffer (0x04)
                    {
                         0x02, 0x8D, 0x00, 0x00                         
                    }
                }, Local0)
            DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
            Return (Local0)
        }
    }

    // ETH FIX

    External (_SB_.PCI0, DeviceObj)    // (from opcode)
    External (_SB_.PCI0.GLAN, DeviceObj)    // (from opcode)
    External (DTGP, MethodObj)    // 5 Arguments (from opcode)

    Scope (\_SB.PCI0)
    {
        Scope (GLAN)
        {
            Name (_STA, Zero)  // _STA: Status
        }

        Device (ETH0)
        {
            Name (_ADR, 0x00190000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                Store (Package (0x10)
                    {
                        "AAPL,slot-name", 
                        Buffer (0x09)
                        {
                            "Built In"
                        }, 

                        "built-in", 
                        Buffer (One)
                        {
                             0x00                                           
                        }, 

                        "name", 
                        Buffer (0x2A)
                        {
                            "Intel i218-V PCI Express Gigabit Ethernet"
                        }, 

                        "model", 
                        Buffer (0x21)
                        {
                            "Intel i218-V Ethernet Controller"
                        }, 

                        "location", 
                        Buffer (0x02)
                        {
                            "1"
                        }, 

                        "subsystem-id", 
                        Buffer (0x04)
                        {
                             0xC4, 0x85, 0x00, 0x00                         
                        }, 

                        "device-id", 
                        Buffer (0x04)
                        {
                             0xA1, 0x15, 0x00, 0x00                         
                        }, 

                        "subsystem-vendor-id", 
                        Buffer (0x04)
                        {
                             0x43, 0x10, 0x00, 0x00                         
                        }
                    }, Local0)
                DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                Return (Local0)
            }
        }
    }

    // ARPT FIX

    External (_SB_.PCI0.RP07, DeviceObj)    // (from opcode)
    External (DTGP, MethodObj)    // 5 Arguments (from opcode)

    Scope (_SB.PCI0.RP07)
    {
        Device (ARPT)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (0x04)
                    {
                         0x03                                           
                    })
                }

                Store (Package (0x0C)
                    {
                        "AAPL,slot-name", 
                        Buffer (0x07)
                        {
                            "Slot-5"
                        }, 

                        "built-in", 
                        Buffer (One)
                        {
                             0x00                                           
                        }, 

                        "device_type", 
                        Buffer (0x13)
                        {
                            "AirPort Controller"
                        }, 

                        "model", 
                        Buffer (0x4A)
                        {
                            "OSX WIFI Broadcom BCM94360CD 802.11 a/b/g/n/ac + Bluetooth 4.0 Controller"
                        }, 

                        "compatible", 
                        Buffer (0x0D)
                        {
                            "pci14e4,43a0"
                        }, 

                        "name", 
                        Buffer (0x10)
                        {
                            "AirPort Extreme"
                        }
                    }, Local0)
                DTGP (Arg0, Arg1, Arg2, Arg3, RefOf (Local0))
                Return (Local0)
            }
        }
    }
}

